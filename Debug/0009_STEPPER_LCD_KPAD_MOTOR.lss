
0009_STEPPER_LCD_KPAD_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  000024b8  0000252c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ec0  00000000  00000000  00002568  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011e2  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000560a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000574a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000058ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000083ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000919c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000092fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009d57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 6f 11 	call	0x22de	; 0x22de <main>
      7a:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e8       	ldi	r26, 0x82	; 130
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e8       	ldi	r24, 0x82	; 130
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <HKeyPad_u8GetKey>:
// loop on all ROWs > checking pins
// if one is pressed get its value
// else set the reseted column
// return the key
//
u8 HKeyPad_u8GetKey(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	a2 97       	sbiw	r28, 0x22	; 34
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	u8 flag = 0;
     b4a:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8pressedKey 	= NO_KEY;
     b4c:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8keyIspressed = NOT_PRESSED;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8ColIterator = 0;
     b52:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowIterator = 0;
     b54:	19 82       	std	Y+1, r1	; 0x01
	u8 Col_arr[COL_SIZE] = {
				KEYPAD_C0,
				KEYPAD_C1,
				KEYPAD_C2,
				KEYPAD_C3
		};
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	8e 83       	std	Y+6, r24	; 0x06
     b5a:	85 e0       	ldi	r24, 0x05	; 5
     b5c:	8f 83       	std	Y+7, r24	; 0x07
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	88 87       	std	Y+8, r24	; 0x08
     b62:	87 e0       	ldi	r24, 0x07	; 7
     b64:	89 87       	std	Y+9, r24	; 0x09
	u8 Row_arr[ROW_SIZE] = {
				KEYPAD_R0,
				KEYPAD_R1,
				KEYPAD_R2,
				KEYPAD_R3
		};
     b66:	1a 86       	std	Y+10, r1	; 0x0a
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	8b 87       	std	Y+11, r24	; 0x0b
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	8c 87       	std	Y+12, r24	; 0x0c
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	8d 87       	std	Y+13, r24	; 0x0d

	u8 KeyPad_arr[ROW_SIZE][COL_SIZE] = KEYPAD_TYPE;
     b74:	ce 01       	movw	r24, r28
     b76:	0e 96       	adiw	r24, 0x0e	; 14
     b78:	9f 8f       	std	Y+31, r25	; 0x1f
     b7a:	8e 8f       	std	Y+30, r24	; 0x1e
     b7c:	ea e8       	ldi	r30, 0x8A	; 138
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	f9 a3       	std	Y+33, r31	; 0x21
     b82:	e8 a3       	std	Y+32, r30	; 0x20
     b84:	f0 e1       	ldi	r31, 0x10	; 16
     b86:	fa a3       	std	Y+34, r31	; 0x22
     b88:	e8 a1       	ldd	r30, Y+32	; 0x20
     b8a:	f9 a1       	ldd	r31, Y+33	; 0x21
     b8c:	00 80       	ld	r0, Z
     b8e:	88 a1       	ldd	r24, Y+32	; 0x20
     b90:	99 a1       	ldd	r25, Y+33	; 0x21
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	99 a3       	std	Y+33, r25	; 0x21
     b96:	88 a3       	std	Y+32, r24	; 0x20
     b98:	ee 8d       	ldd	r30, Y+30	; 0x1e
     b9a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     b9c:	00 82       	st	Z, r0
     b9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ba0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	9f 8f       	std	Y+31, r25	; 0x1f
     ba6:	8e 8f       	std	Y+30, r24	; 0x1e
     ba8:	9a a1       	ldd	r25, Y+34	; 0x22
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	9a a3       	std	Y+34, r25	; 0x22
     bae:	ea a1       	ldd	r30, Y+34	; 0x22
     bb0:	ee 23       	and	r30, r30
     bb2:	51 f7       	brne	.-44     	; 0xb88 <HKeyPad_u8GetKey+0x52>
	MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[KEYPAD_C0], DIO_HIGH);
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	69 2f       	mov	r22, r25
     bba:	41 e0       	ldi	r20, 0x01	; 1
     bbc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[KEYPAD_C1], DIO_HIGH);
     bc0:	9b 85       	ldd	r25, Y+11	; 0x0b
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	69 2f       	mov	r22, r25
     bc6:	41 e0       	ldi	r20, 0x01	; 1
     bc8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[KEYPAD_C2], DIO_HIGH);
     bcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	69 2f       	mov	r22, r25
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[KEYPAD_C3], DIO_HIGH);
     bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	69 2f       	mov	r22, r25
     bde:	41 e0       	ldi	r20, 0x01	; 1
     be0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>

	for (Local_u8ColIterator = 0 ; Local_u8ColIterator < COL_SIZE ; Local_u8ColIterator++){
     be4:	1a 82       	std	Y+2, r1	; 0x02
     be6:	6b c0       	rjmp	.+214    	; 0xcbe <HKeyPad_u8GetKey+0x188>

		MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	ce 01       	movw	r24, r28
     bf0:	06 96       	adiw	r24, 0x06	; 6
     bf2:	fc 01       	movw	r30, r24
     bf4:	e2 0f       	add	r30, r18
     bf6:	f3 1f       	adc	r31, r19
     bf8:	90 81       	ld	r25, Z
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	69 2f       	mov	r22, r25
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>

		for (Local_u8RowIterator = 0 ; Local_u8RowIterator < ROW_SIZE ; Local_u8RowIterator++){
     c04:	19 82       	std	Y+1, r1	; 0x01
     c06:	43 c0       	rjmp	.+134    	; 0xc8e <HKeyPad_u8GetKey+0x158>

			MDIO_ErrorS_GetPinValue(KEYPAD_PORT , Row_arr[Local_u8RowIterator] , &Local_u8keyIspressed);
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	ce 01       	movw	r24, r28
     c10:	0a 96       	adiw	r24, 0x0a	; 10
     c12:	fc 01       	movw	r30, r24
     c14:	e2 0f       	add	r30, r18
     c16:	f3 1f       	adc	r31, r19
     c18:	90 81       	ld	r25, Z
     c1a:	9e 01       	movw	r18, r28
     c1c:	2b 5f       	subi	r18, 0xFB	; 251
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	69 2f       	mov	r22, r25
     c24:	a9 01       	movw	r20, r18
     c26:	0e 94 42 10 	call	0x2084	; 0x2084 <MDIO_ErrorS_GetPinValue>

			if (!Local_u8keyIspressed){
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	88 23       	and	r24, r24
     c2e:	61 f5       	brne	.+88     	; 0xc88 <HKeyPad_u8GetKey+0x152>
     c30:	11 c0       	rjmp	.+34     	; 0xc54 <HKeyPad_u8GetKey+0x11e>
				while(!Local_u8keyIspressed){
					MDIO_ErrorS_GetPinValue(KEYPAD_PORT , Row_arr[Local_u8RowIterator] , &Local_u8keyIspressed);
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	ce 01       	movw	r24, r28
     c3a:	0a 96       	adiw	r24, 0x0a	; 10
     c3c:	fc 01       	movw	r30, r24
     c3e:	e2 0f       	add	r30, r18
     c40:	f3 1f       	adc	r31, r19
     c42:	90 81       	ld	r25, Z
     c44:	9e 01       	movw	r18, r28
     c46:	2b 5f       	subi	r18, 0xFB	; 251
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	69 2f       	mov	r22, r25
     c4e:	a9 01       	movw	r20, r18
     c50:	0e 94 42 10 	call	0x2084	; 0x2084 <MDIO_ErrorS_GetPinValue>
		for (Local_u8RowIterator = 0 ; Local_u8RowIterator < ROW_SIZE ; Local_u8RowIterator++){

			MDIO_ErrorS_GetPinValue(KEYPAD_PORT , Row_arr[Local_u8RowIterator] , &Local_u8keyIspressed);

			if (!Local_u8keyIspressed){
				while(!Local_u8keyIspressed){
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	88 23       	and	r24, r24
     c58:	61 f3       	breq	.-40     	; 0xc32 <HKeyPad_u8GetKey+0xfc>
					MDIO_ErrorS_GetPinValue(KEYPAD_PORT , Row_arr[Local_u8RowIterator] , &Local_u8keyIspressed);
				}
				Local_u8pressedKey = KeyPad_arr[Local_u8RowIterator][Local_u8ColIterator];
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	48 2f       	mov	r20, r24
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	22 0f       	add	r18, r18
     c68:	33 1f       	adc	r19, r19
     c6a:	22 0f       	add	r18, r18
     c6c:	33 1f       	adc	r19, r19
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	82 0f       	add	r24, r18
     c74:	93 1f       	adc	r25, r19
     c76:	84 0f       	add	r24, r20
     c78:	95 1f       	adc	r25, r21
     c7a:	fc 01       	movw	r30, r24
     c7c:	3d 96       	adiw	r30, 0x0d	; 13
     c7e:	80 81       	ld	r24, Z
     c80:	8b 83       	std	Y+3, r24	; 0x03
				flag = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	8c 83       	std	Y+4, r24	; 0x04
     c86:	07 c0       	rjmp	.+14     	; 0xc96 <HKeyPad_u8GetKey+0x160>

	for (Local_u8ColIterator = 0 ; Local_u8ColIterator < COL_SIZE ; Local_u8ColIterator++){

		MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[Local_u8ColIterator], DIO_LOW);

		for (Local_u8RowIterator = 0 ; Local_u8RowIterator < ROW_SIZE ; Local_u8RowIterator++){
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	84 30       	cpi	r24, 0x04	; 4
     c92:	08 f4       	brcc	.+2      	; 0xc96 <HKeyPad_u8GetKey+0x160>
     c94:	b9 cf       	rjmp	.-142    	; 0xc08 <HKeyPad_u8GetKey+0xd2>
			else {

			}
		}

		MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[Local_u8ColIterator], DIO_HIGH);
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	ce 01       	movw	r24, r28
     c9e:	06 96       	adiw	r24, 0x06	; 6
     ca0:	fc 01       	movw	r30, r24
     ca2:	e2 0f       	add	r30, r18
     ca4:	f3 1f       	adc	r31, r19
     ca6:	90 81       	ld	r25, Z
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	69 2f       	mov	r22, r25
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		if (flag){
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	88 23       	and	r24, r24
     cb6:	39 f4       	brne	.+14     	; 0xcc6 <HKeyPad_u8GetKey+0x190>
	MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[KEYPAD_C0], DIO_HIGH);
	MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[KEYPAD_C1], DIO_HIGH);
	MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[KEYPAD_C2], DIO_HIGH);
	MDIO_ErrorS_SetPinValue(KEYPAD_PORT,Col_arr[KEYPAD_C3], DIO_HIGH);

	for (Local_u8ColIterator = 0 ; Local_u8ColIterator < COL_SIZE ; Local_u8ColIterator++){
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	8a 83       	std	Y+2, r24	; 0x02
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	84 30       	cpi	r24, 0x04	; 4
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <HKeyPad_u8GetKey+0x190>
     cc4:	91 cf       	rjmp	.-222    	; 0xbe8 <HKeyPad_u8GetKey+0xb2>
		else {

		}

	}
	return Local_u8pressedKey;
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     cc8:	a2 96       	adiw	r28, 0x22	; 34
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <HLCD_voidInit>:
#include "HLCD_private.h"
#include "HLCD_config.h"



void HLCD_voidInit(){
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	2e 97       	sbiw	r28, 0x0e	; 14
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a0 e2       	ldi	r26, 0x20	; 32
     cf4:	b2 e4       	ldi	r27, 0x42	; 66
     cf6:	8b 87       	std	Y+11, r24	; 0x0b
     cf8:	9c 87       	std	Y+12, r25	; 0x0c
     cfa:	ad 87       	std	Y+13, r26	; 0x0d
     cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     d00:	7c 85       	ldd	r23, Y+12	; 0x0c
     d02:	8d 85       	ldd	r24, Y+13	; 0x0d
     d04:	9e 85       	ldd	r25, Y+14	; 0x0e
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a ef       	ldi	r20, 0xFA	; 250
     d0c:	54 e4       	ldi	r21, 0x44	; 68
     d0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	8f 83       	std	Y+7, r24	; 0x07
     d18:	98 87       	std	Y+8, r25	; 0x08
     d1a:	a9 87       	std	Y+9, r26	; 0x09
     d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d1e:	6f 81       	ldd	r22, Y+7	; 0x07
     d20:	78 85       	ldd	r23, Y+8	; 0x08
     d22:	89 85       	ldd	r24, Y+9	; 0x09
     d24:	9a 85       	ldd	r25, Y+10	; 0x0a
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	2c f4       	brge	.+10     	; 0xd40 <HLCD_voidInit+0x66>
		__ticks = 1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9e 83       	std	Y+6, r25	; 0x06
     d3c:	8d 83       	std	Y+5, r24	; 0x05
     d3e:	3f c0       	rjmp	.+126    	; 0xdbe <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d40:	6f 81       	ldd	r22, Y+7	; 0x07
     d42:	78 85       	ldd	r23, Y+8	; 0x08
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	3f ef       	ldi	r19, 0xFF	; 255
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	4c f5       	brge	.+82     	; 0xdaa <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d58:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e2       	ldi	r20, 0x20	; 32
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <HLCD_voidInit+0xc6>
     d82:	88 ec       	ldi	r24, 0xC8	; 200
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <HLCD_voidInit+0xb4>
     d92:	9c 83       	std	Y+4, r25	; 0x04
     d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	9e 83       	std	Y+6, r25	; 0x06
     d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da0:	8d 81       	ldd	r24, Y+5	; 0x05
     da2:	9e 81       	ldd	r25, Y+6	; 0x06
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	69 f7       	brne	.-38     	; 0xd82 <HLCD_voidInit+0xa8>
     da8:	14 c0       	rjmp	.+40     	; 0xdd2 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	9e 83       	std	Y+6, r25	; 0x06
     dbc:	8d 83       	std	Y+5, r24	; 0x05
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <HLCD_voidInit+0xf0>
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	HLCD_voidSendCommand(0b00111100); 		// function set
     dd2:	8c e3       	ldi	r24, 0x3C	; 60
     dd4:	0e 94 99 07 	call	0xf32	; 0xf32 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0b00001100); 		// display on/off control
     dd8:	8c e0       	ldi	r24, 0x0C	; 12
     dda:	0e 94 99 07 	call	0xf32	; 0xf32 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0b00000001); 		// clear display
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	0e 94 99 07 	call	0xf32	; 0xf32 <HLCD_voidSendCommand>

}
     de4:	2e 96       	adiw	r28, 0x0e	; 14
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <HLCD_voidSendData>:
void HLCD_voidSendData(u8 Copy_u8Data){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	2f 97       	sbiw	r28, 0x0f	; 15
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	8f 87       	std	Y+15, r24	; 0x0f
	/*	SET RS to send data */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_HIGH);
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
	/*	CLR RS to Enable write */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
	/*Send Data */
	MDIO_ErrorS_SetPortValue(LCD_PORT_DATA,Copy_u8Data);
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	6f 85       	ldd	r22, Y+15	; 0x0f
     e24:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <MDIO_ErrorS_SetPortValue>
	/* set EN for 2ms to make LCD CPU reads the data  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	62 e0       	ldi	r22, 0x02	; 2
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e4       	ldi	r27, 0x40	; 64
     e3a:	8b 87       	std	Y+11, r24	; 0x0b
     e3c:	9c 87       	std	Y+12, r25	; 0x0c
     e3e:	ad 87       	std	Y+13, r26	; 0x0d
     e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e42:	6b 85       	ldd	r22, Y+11	; 0x0b
     e44:	7c 85       	ldd	r23, Y+12	; 0x0c
     e46:	8d 85       	ldd	r24, Y+13	; 0x0d
     e48:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	4a ef       	ldi	r20, 0xFA	; 250
     e50:	54 e4       	ldi	r21, 0x44	; 68
     e52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	8f 83       	std	Y+7, r24	; 0x07
     e5c:	98 87       	std	Y+8, r25	; 0x08
     e5e:	a9 87       	std	Y+9, r26	; 0x09
     e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e76:	88 23       	and	r24, r24
     e78:	2c f4       	brge	.+10     	; 0xe84 <HLCD_voidSendData+0x8e>
		__ticks = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9e 83       	std	Y+6, r25	; 0x06
     e80:	8d 83       	std	Y+5, r24	; 0x05
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     e84:	6f 81       	ldd	r22, Y+7	; 0x07
     e86:	78 85       	ldd	r23, Y+8	; 0x08
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	3f ef       	ldi	r19, 0xFF	; 255
     e90:	4f e7       	ldi	r20, 0x7F	; 127
     e92:	57 e4       	ldi	r21, 0x47	; 71
     e94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e98:	18 16       	cp	r1, r24
     e9a:	4c f5       	brge	.+82     	; 0xeee <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e2       	ldi	r20, 0x20	; 32
     eaa:	51 e4       	ldi	r21, 0x41	; 65
     eac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	bc 01       	movw	r22, r24
     eb6:	cd 01       	movw	r24, r26
     eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
     ec4:	0f c0       	rjmp	.+30     	; 0xee4 <HLCD_voidSendData+0xee>
     ec6:	88 ec       	ldi	r24, 0xC8	; 200
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <HLCD_voidSendData+0xdc>
     ed6:	9c 83       	std	Y+4, r25	; 0x04
     ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	9e 81       	ldd	r25, Y+6	; 0x06
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	9e 83       	std	Y+6, r25	; 0x06
     ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	69 f7       	brne	.-38     	; 0xec6 <HLCD_voidSendData+0xd0>
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eee:	6f 81       	ldd	r22, Y+7	; 0x07
     ef0:	78 85       	ldd	r23, Y+8	; 0x08
     ef2:	89 85       	ldd	r24, Y+9	; 0x09
     ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9e 83       	std	Y+6, r25	; 0x06
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <HLCD_voidSendData+0x118>
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>



}
     f20:	2f 96       	adiw	r28, 0x0f	; 15
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <HLCD_voidSendCommand>:
void HLCD_voidSendCommand(u8 Copy_u8Command){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	2f 97       	sbiw	r28, 0x0f	; 15
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	8f 87       	std	Y+15, r24	; 0x0f

	/*	CLR RS to send command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW);
     f48:	84 e0       	ldi	r24, 0x04	; 4
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>

	/*	CLR RS to Enable write */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
     f52:	84 e0       	ldi	r24, 0x04	; 4
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>

	/*Send Command */
	MDIO_ErrorS_SetPortValue(LCD_PORT_DATA,Copy_u8Command);
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	6f 85       	ldd	r22, Y+15	; 0x0f
     f60:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <MDIO_ErrorS_SetPortValue>

	/* set EN for 2ms to make LCD CPU reads the command  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	b0 e4       	ldi	r27, 0x40	; 64
     f76:	8b 87       	std	Y+11, r24	; 0x0b
     f78:	9c 87       	std	Y+12, r25	; 0x0c
     f7a:	ad 87       	std	Y+13, r26	; 0x0d
     f7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f80:	7c 85       	ldd	r23, Y+12	; 0x0c
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	4a ef       	ldi	r20, 0xFA	; 250
     f8c:	54 e4       	ldi	r21, 0x44	; 68
     f8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	8f 83       	std	Y+7, r24	; 0x07
     f98:	98 87       	std	Y+8, r25	; 0x08
     f9a:	a9 87       	std	Y+9, r26	; 0x09
     f9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f9e:	6f 81       	ldd	r22, Y+7	; 0x07
     fa0:	78 85       	ldd	r23, Y+8	; 0x08
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fb2:	88 23       	and	r24, r24
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9e 83       	std	Y+6, r25	; 0x06
     fbc:	8d 83       	std	Y+5, r24	; 0x05
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	57 e4       	ldi	r21, 0x47	; 71
     fd0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	4c f5       	brge	.+82     	; 0x102a <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fda:	7c 85       	ldd	r23, Y+12	; 0x0c
     fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fde:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e2       	ldi	r20, 0x20	; 32
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9e 83       	std	Y+6, r25	; 0x06
     ffe:	8d 83       	std	Y+5, r24	; 0x05
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <HLCD_voidSendCommand+0xee>
    1002:	88 ec       	ldi	r24, 0xC8	; 200
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9c 83       	std	Y+4, r25	; 0x04
    1008:	8b 83       	std	Y+3, r24	; 0x03
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <HLCD_voidSendCommand+0xdc>
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	8d 81       	ldd	r24, Y+5	; 0x05
    1022:	9e 81       	ldd	r25, Y+6	; 0x06
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	69 f7       	brne	.-38     	; 0x1002 <HLCD_voidSendCommand+0xd0>
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102a:	6f 81       	ldd	r22, Y+7	; 0x07
    102c:	78 85       	ldd	r23, Y+8	; 0x08
    102e:	89 85       	ldd	r24, Y+9	; 0x09
    1030:	9a 85       	ldd	r25, Y+10	; 0x0a
    1032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <HLCD_voidSendCommand+0x118>
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	62 e0       	ldi	r22, 0x02	; 2
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>

}
    105c:	2f 96       	adiw	r28, 0x0f	; 15
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	08 95       	ret

0000106e <HLCD_voidSendString>:


void HLCD_voidSendString(s8 Copy_u8Data[]){
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <HLCD_voidSendString+0x6>
    1074:	00 d0       	rcall	.+0      	; 0x1076 <HLCD_voidSendString+0x8>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0 ;
    107e:	1a 82       	std	Y+2, r1	; 0x02
    1080:	19 82       	std	Y+1, r1	; 0x01
    1082:	0f c0       	rjmp	.+30     	; 0x10a2 <HLCD_voidSendString+0x34>
	while (Copy_u8Data[i]!='\0'){
		HLCD_voidSendData(Copy_u8Data[i]);
    1084:	29 81       	ldd	r18, Y+1	; 0x01
    1086:	3a 81       	ldd	r19, Y+2	; 0x02
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	fc 01       	movw	r30, r24
    108e:	e2 0f       	add	r30, r18
    1090:	f3 1f       	adc	r31, r19
    1092:	80 81       	ld	r24, Z
    1094:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <HLCD_voidSendData>
		i++;
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
}


void HLCD_voidSendString(s8 Copy_u8Data[]){
	int i = 0 ;
	while (Copy_u8Data[i]!='\0'){
    10a2:	29 81       	ldd	r18, Y+1	; 0x01
    10a4:	3a 81       	ldd	r19, Y+2	; 0x02
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	fc 01       	movw	r30, r24
    10ac:	e2 0f       	add	r30, r18
    10ae:	f3 1f       	adc	r31, r19
    10b0:	80 81       	ld	r24, Z
    10b2:	88 23       	and	r24, r24
    10b4:	39 f7       	brne	.-50     	; 0x1084 <HLCD_voidSendString+0x16>
		HLCD_voidSendData(Copy_u8Data[i]);
		i++;
	}
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <HLCD_voidSendInt>:

void HLCD_voidSendInt(s32 Copy_u32Data){
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	68 97       	sbiw	r28, 0x18	; 24
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	6d 8b       	std	Y+21, r22	; 0x15
    10da:	7e 8b       	std	Y+22, r23	; 0x16
    10dc:	8f 8b       	std	Y+23, r24	; 0x17
    10de:	98 8f       	std	Y+24, r25	; 0x18
	s8 s[20];
		itoa(Copy_u32Data, s, 10);
    10e0:	8d 89       	ldd	r24, Y+21	; 0x15
    10e2:	9e 89       	ldd	r25, Y+22	; 0x16
    10e4:	9e 01       	movw	r18, r28
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	b9 01       	movw	r22, r18
    10ec:	4a e0       	ldi	r20, 0x0A	; 10
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	0e 94 29 12 	call	0x2452	; 0x2452 <itoa>
		HLCD_voidSendString(s);
    10f4:	ce 01       	movw	r24, r28
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	0e 94 37 08 	call	0x106e	; 0x106e <HLCD_voidSendString>
}
    10fc:	68 96       	adiw	r28, 0x18	; 24
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(){
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000001);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	0e 94 99 07 	call	0xf32	; 0xf32 <HLCD_voidSendCommand>
}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <HLCD_voidReturnHome>:

void HLCD_voidReturnHome(){
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000010);
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	0e 94 99 07 	call	0xf32	; 0xf32 <HLCD_voidSendCommand>
}
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <HLCD_voidSetCursorPosition>:

void HLCD_voidSetCursorPosition(u8 x , u8 y){
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <HLCD_voidSetCursorPosition+0x6>
    113c:	0f 92       	push	r0
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	8a 83       	std	Y+2, r24	; 0x02
    1144:	6b 83       	std	Y+3, r22	; 0x03
	u8 command = 0b10000000;
    1146:	80 e8       	ldi	r24, 0x80	; 128
    1148:	89 83       	std	Y+1, r24	; 0x01
	if (x == 2) command  |=0x40 ;
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	19 f4       	brne	.+6      	; 0x1156 <HLCD_voidSetCursorPosition+0x20>
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	80 64       	ori	r24, 0x40	; 64
    1154:	89 83       	std	Y+1, r24	; 0x01
	command  +=y ;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9b 81       	ldd	r25, Y+3	; 0x03
    115a:	89 0f       	add	r24, r25
    115c:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(command);
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	0e 94 99 07 	call	0xf32	; 0xf32 <HLCD_voidSendCommand>
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <Hstepper_rotate_CW>:
#include "BIT_MATH.h"
#include "MDIO_interface.h"
#include "HStpper_config.h"
#include "HStpper_interface.h"
#include "HStpper_private.h"
void Hstepper_rotate_CW (u16 deg){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	ec 97       	sbiw	r28, 0x3c	; 60
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	9c af       	std	Y+60, r25	; 0x3c
    1186:	8b af       	std	Y+59, r24	; 0x3b

	deg *= 107;
    1188:	2b ad       	ldd	r18, Y+59	; 0x3b
    118a:	3c ad       	ldd	r19, Y+60	; 0x3c
    118c:	8b e6       	ldi	r24, 0x6B	; 107
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	ac 01       	movw	r20, r24
    1192:	24 9f       	mul	r18, r20
    1194:	c0 01       	movw	r24, r0
    1196:	25 9f       	mul	r18, r21
    1198:	90 0d       	add	r25, r0
    119a:	34 9f       	mul	r19, r20
    119c:	90 0d       	add	r25, r0
    119e:	11 24       	eor	r1, r1
    11a0:	9c af       	std	Y+60, r25	; 0x3c
    11a2:	8b af       	std	Y+59, r24	; 0x3b
	deg /= 7 ;
    11a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    11a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    11a8:	27 e0       	ldi	r18, 0x07	; 7
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	b9 01       	movw	r22, r18
    11ae:	0e 94 de 11 	call	0x23bc	; 0x23bc <__udivmodhi4>
    11b2:	cb 01       	movw	r24, r22
    11b4:	9c af       	std	Y+60, r25	; 0x3c
    11b6:	8b af       	std	Y+59, r24	; 0x3b

	u16 i = 0;
    11b8:	1a ae       	std	Y+58, r1	; 0x3a
    11ba:	19 ae       	std	Y+57, r1	; 0x39
    11bc:	1d c2       	rjmp	.+1082   	; 0x15f8 <Hstepper_rotate_CW+0x488>
	for (;i < deg;i++){

		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	62 e0       	ldi	r22, 0x02	; 2
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_HIGH);
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	63 e0       	ldi	r22, 0x03	; 3
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e4       	ldi	r27, 0x40	; 64
    11ee:	8d ab       	std	Y+53, r24	; 0x35
    11f0:	9e ab       	std	Y+54, r25	; 0x36
    11f2:	af ab       	std	Y+55, r26	; 0x37
    11f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f6:	6d a9       	ldd	r22, Y+53	; 0x35
    11f8:	7e a9       	ldd	r23, Y+54	; 0x36
    11fa:	8f a9       	ldd	r24, Y+55	; 0x37
    11fc:	98 ad       	ldd	r25, Y+56	; 0x38
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4a ef       	ldi	r20, 0xFA	; 250
    1204:	54 e4       	ldi	r21, 0x44	; 68
    1206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	89 ab       	std	Y+49, r24	; 0x31
    1210:	9a ab       	std	Y+50, r25	; 0x32
    1212:	ab ab       	std	Y+51, r26	; 0x33
    1214:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1216:	69 a9       	ldd	r22, Y+49	; 0x31
    1218:	7a a9       	ldd	r23, Y+50	; 0x32
    121a:	8b a9       	ldd	r24, Y+51	; 0x33
    121c:	9c a9       	ldd	r25, Y+52	; 0x34
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e8       	ldi	r20, 0x80	; 128
    1224:	5f e3       	ldi	r21, 0x3F	; 63
    1226:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    122a:	88 23       	and	r24, r24
    122c:	2c f4       	brge	.+10     	; 0x1238 <Hstepper_rotate_CW+0xc8>
		__ticks = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	98 ab       	std	Y+48, r25	; 0x30
    1234:	8f a7       	std	Y+47, r24	; 0x2f
    1236:	3f c0       	rjmp	.+126    	; 0x12b6 <Hstepper_rotate_CW+0x146>
	else if (__tmp > 65535)
    1238:	69 a9       	ldd	r22, Y+49	; 0x31
    123a:	7a a9       	ldd	r23, Y+50	; 0x32
    123c:	8b a9       	ldd	r24, Y+51	; 0x33
    123e:	9c a9       	ldd	r25, Y+52	; 0x34
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	3f ef       	ldi	r19, 0xFF	; 255
    1244:	4f e7       	ldi	r20, 0x7F	; 127
    1246:	57 e4       	ldi	r21, 0x47	; 71
    1248:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    124c:	18 16       	cp	r1, r24
    124e:	4c f5       	brge	.+82     	; 0x12a2 <Hstepper_rotate_CW+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1250:	6d a9       	ldd	r22, Y+53	; 0x35
    1252:	7e a9       	ldd	r23, Y+54	; 0x36
    1254:	8f a9       	ldd	r24, Y+55	; 0x37
    1256:	98 ad       	ldd	r25, Y+56	; 0x38
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e2       	ldi	r20, 0x20	; 32
    125e:	51 e4       	ldi	r21, 0x41	; 65
    1260:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	98 ab       	std	Y+48, r25	; 0x30
    1276:	8f a7       	std	Y+47, r24	; 0x2f
    1278:	0f c0       	rjmp	.+30     	; 0x1298 <Hstepper_rotate_CW+0x128>
    127a:	88 ec       	ldi	r24, 0xC8	; 200
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9e a7       	std	Y+46, r25	; 0x2e
    1280:	8d a7       	std	Y+45, r24	; 0x2d
    1282:	8d a5       	ldd	r24, Y+45	; 0x2d
    1284:	9e a5       	ldd	r25, Y+46	; 0x2e
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <Hstepper_rotate_CW+0x116>
    128a:	9e a7       	std	Y+46, r25	; 0x2e
    128c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1290:	98 a9       	ldd	r25, Y+48	; 0x30
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	98 ab       	std	Y+48, r25	; 0x30
    1296:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1298:	8f a5       	ldd	r24, Y+47	; 0x2f
    129a:	98 a9       	ldd	r25, Y+48	; 0x30
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	69 f7       	brne	.-38     	; 0x127a <Hstepper_rotate_CW+0x10a>
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <Hstepper_rotate_CW+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a2:	69 a9       	ldd	r22, Y+49	; 0x31
    12a4:	7a a9       	ldd	r23, Y+50	; 0x32
    12a6:	8b a9       	ldd	r24, Y+51	; 0x33
    12a8:	9c a9       	ldd	r25, Y+52	; 0x34
    12aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	98 ab       	std	Y+48, r25	; 0x30
    12b4:	8f a7       	std	Y+47, r24	; 0x2f
    12b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b8:	98 a9       	ldd	r25, Y+48	; 0x30
    12ba:	9c a7       	std	Y+44, r25	; 0x2c
    12bc:	8b a7       	std	Y+43, r24	; 0x2b
    12be:	8b a5       	ldd	r24, Y+43	; 0x2b
    12c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <Hstepper_rotate_CW+0x152>
    12c6:	9c a7       	std	Y+44, r25	; 0x2c
    12c8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_HIGH);
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	62 e0       	ldi	r22, 0x02	; 2
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	63 e0       	ldi	r22, 0x03	; 3
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	a0 e0       	ldi	r26, 0x00	; 0
    12f8:	b0 e4       	ldi	r27, 0x40	; 64
    12fa:	8f a3       	std	Y+39, r24	; 0x27
    12fc:	98 a7       	std	Y+40, r25	; 0x28
    12fe:	a9 a7       	std	Y+41, r26	; 0x29
    1300:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1302:	6f a1       	ldd	r22, Y+39	; 0x27
    1304:	78 a5       	ldd	r23, Y+40	; 0x28
    1306:	89 a5       	ldd	r24, Y+41	; 0x29
    1308:	9a a5       	ldd	r25, Y+42	; 0x2a
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4a ef       	ldi	r20, 0xFA	; 250
    1310:	54 e4       	ldi	r21, 0x44	; 68
    1312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	8b a3       	std	Y+35, r24	; 0x23
    131c:	9c a3       	std	Y+36, r25	; 0x24
    131e:	ad a3       	std	Y+37, r26	; 0x25
    1320:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1322:	6b a1       	ldd	r22, Y+35	; 0x23
    1324:	7c a1       	ldd	r23, Y+36	; 0x24
    1326:	8d a1       	ldd	r24, Y+37	; 0x25
    1328:	9e a1       	ldd	r25, Y+38	; 0x26
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e8       	ldi	r20, 0x80	; 128
    1330:	5f e3       	ldi	r21, 0x3F	; 63
    1332:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1336:	88 23       	and	r24, r24
    1338:	2c f4       	brge	.+10     	; 0x1344 <Hstepper_rotate_CW+0x1d4>
		__ticks = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	9a a3       	std	Y+34, r25	; 0x22
    1340:	89 a3       	std	Y+33, r24	; 0x21
    1342:	3f c0       	rjmp	.+126    	; 0x13c2 <Hstepper_rotate_CW+0x252>
	else if (__tmp > 65535)
    1344:	6b a1       	ldd	r22, Y+35	; 0x23
    1346:	7c a1       	ldd	r23, Y+36	; 0x24
    1348:	8d a1       	ldd	r24, Y+37	; 0x25
    134a:	9e a1       	ldd	r25, Y+38	; 0x26
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	3f ef       	ldi	r19, 0xFF	; 255
    1350:	4f e7       	ldi	r20, 0x7F	; 127
    1352:	57 e4       	ldi	r21, 0x47	; 71
    1354:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1358:	18 16       	cp	r1, r24
    135a:	4c f5       	brge	.+82     	; 0x13ae <Hstepper_rotate_CW+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135c:	6f a1       	ldd	r22, Y+39	; 0x27
    135e:	78 a5       	ldd	r23, Y+40	; 0x28
    1360:	89 a5       	ldd	r24, Y+41	; 0x29
    1362:	9a a5       	ldd	r25, Y+42	; 0x2a
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e2       	ldi	r20, 0x20	; 32
    136a:	51 e4       	ldi	r21, 0x41	; 65
    136c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	bc 01       	movw	r22, r24
    1376:	cd 01       	movw	r24, r26
    1378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9a a3       	std	Y+34, r25	; 0x22
    1382:	89 a3       	std	Y+33, r24	; 0x21
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <Hstepper_rotate_CW+0x234>
    1386:	88 ec       	ldi	r24, 0xC8	; 200
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	98 a3       	std	Y+32, r25	; 0x20
    138c:	8f 8f       	std	Y+31, r24	; 0x1f
    138e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1390:	98 a1       	ldd	r25, Y+32	; 0x20
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <Hstepper_rotate_CW+0x222>
    1396:	98 a3       	std	Y+32, r25	; 0x20
    1398:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139a:	89 a1       	ldd	r24, Y+33	; 0x21
    139c:	9a a1       	ldd	r25, Y+34	; 0x22
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	9a a3       	std	Y+34, r25	; 0x22
    13a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a4:	89 a1       	ldd	r24, Y+33	; 0x21
    13a6:	9a a1       	ldd	r25, Y+34	; 0x22
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	69 f7       	brne	.-38     	; 0x1386 <Hstepper_rotate_CW+0x216>
    13ac:	14 c0       	rjmp	.+40     	; 0x13d6 <Hstepper_rotate_CW+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ae:	6b a1       	ldd	r22, Y+35	; 0x23
    13b0:	7c a1       	ldd	r23, Y+36	; 0x24
    13b2:	8d a1       	ldd	r24, Y+37	; 0x25
    13b4:	9e a1       	ldd	r25, Y+38	; 0x26
    13b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9a a3       	std	Y+34, r25	; 0x22
    13c0:	89 a3       	std	Y+33, r24	; 0x21
    13c2:	89 a1       	ldd	r24, Y+33	; 0x21
    13c4:	9a a1       	ldd	r25, Y+34	; 0x22
    13c6:	9e 8f       	std	Y+30, r25	; 0x1e
    13c8:	8d 8f       	std	Y+29, r24	; 0x1d
    13ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <Hstepper_rotate_CW+0x25e>
    13d2:	9e 8f       	std	Y+30, r25	; 0x1e
    13d4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_HIGH);
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	62 e0       	ldi	r22, 0x02	; 2
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	63 e0       	ldi	r22, 0x03	; 3
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e4       	ldi	r27, 0x40	; 64
    1406:	89 8f       	std	Y+25, r24	; 0x19
    1408:	9a 8f       	std	Y+26, r25	; 0x1a
    140a:	ab 8f       	std	Y+27, r26	; 0x1b
    140c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140e:	69 8d       	ldd	r22, Y+25	; 0x19
    1410:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1412:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1414:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	4a ef       	ldi	r20, 0xFA	; 250
    141c:	54 e4       	ldi	r21, 0x44	; 68
    141e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	8d 8b       	std	Y+21, r24	; 0x15
    1428:	9e 8b       	std	Y+22, r25	; 0x16
    142a:	af 8b       	std	Y+23, r26	; 0x17
    142c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    142e:	6d 89       	ldd	r22, Y+21	; 0x15
    1430:	7e 89       	ldd	r23, Y+22	; 0x16
    1432:	8f 89       	ldd	r24, Y+23	; 0x17
    1434:	98 8d       	ldd	r25, Y+24	; 0x18
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e8       	ldi	r20, 0x80	; 128
    143c:	5f e3       	ldi	r21, 0x3F	; 63
    143e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1442:	88 23       	and	r24, r24
    1444:	2c f4       	brge	.+10     	; 0x1450 <Hstepper_rotate_CW+0x2e0>
		__ticks = 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9c 8b       	std	Y+20, r25	; 0x14
    144c:	8b 8b       	std	Y+19, r24	; 0x13
    144e:	3f c0       	rjmp	.+126    	; 0x14ce <Hstepper_rotate_CW+0x35e>
	else if (__tmp > 65535)
    1450:	6d 89       	ldd	r22, Y+21	; 0x15
    1452:	7e 89       	ldd	r23, Y+22	; 0x16
    1454:	8f 89       	ldd	r24, Y+23	; 0x17
    1456:	98 8d       	ldd	r25, Y+24	; 0x18
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	3f ef       	ldi	r19, 0xFF	; 255
    145c:	4f e7       	ldi	r20, 0x7F	; 127
    145e:	57 e4       	ldi	r21, 0x47	; 71
    1460:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1464:	18 16       	cp	r1, r24
    1466:	4c f5       	brge	.+82     	; 0x14ba <Hstepper_rotate_CW+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1468:	69 8d       	ldd	r22, Y+25	; 0x19
    146a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    146c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    146e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e2       	ldi	r20, 0x20	; 32
    1476:	51 e4       	ldi	r21, 0x41	; 65
    1478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9c 8b       	std	Y+20, r25	; 0x14
    148e:	8b 8b       	std	Y+19, r24	; 0x13
    1490:	0f c0       	rjmp	.+30     	; 0x14b0 <Hstepper_rotate_CW+0x340>
    1492:	88 ec       	ldi	r24, 0xC8	; 200
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9a 8b       	std	Y+18, r25	; 0x12
    1498:	89 8b       	std	Y+17, r24	; 0x11
    149a:	89 89       	ldd	r24, Y+17	; 0x11
    149c:	9a 89       	ldd	r25, Y+18	; 0x12
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <Hstepper_rotate_CW+0x32e>
    14a2:	9a 8b       	std	Y+18, r25	; 0x12
    14a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a6:	8b 89       	ldd	r24, Y+19	; 0x13
    14a8:	9c 89       	ldd	r25, Y+20	; 0x14
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b0:	8b 89       	ldd	r24, Y+19	; 0x13
    14b2:	9c 89       	ldd	r25, Y+20	; 0x14
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	69 f7       	brne	.-38     	; 0x1492 <Hstepper_rotate_CW+0x322>
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <Hstepper_rotate_CW+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ba:	6d 89       	ldd	r22, Y+21	; 0x15
    14bc:	7e 89       	ldd	r23, Y+22	; 0x16
    14be:	8f 89       	ldd	r24, Y+23	; 0x17
    14c0:	98 8d       	ldd	r25, Y+24	; 0x18
    14c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9c 8b       	std	Y+20, r25	; 0x14
    14cc:	8b 8b       	std	Y+19, r24	; 0x13
    14ce:	8b 89       	ldd	r24, Y+19	; 0x13
    14d0:	9c 89       	ldd	r25, Y+20	; 0x14
    14d2:	98 8b       	std	Y+16, r25	; 0x10
    14d4:	8f 87       	std	Y+15, r24	; 0x0f
    14d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d8:	98 89       	ldd	r25, Y+16	; 0x10
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	f1 f7       	brne	.-4      	; 0x14da <Hstepper_rotate_CW+0x36a>
    14de:	98 8b       	std	Y+16, r25	; 0x10
    14e0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_HIGH);
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	63 e0       	ldi	r22, 0x03	; 3
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e0       	ldi	r26, 0x00	; 0
    1510:	b0 e4       	ldi	r27, 0x40	; 64
    1512:	8b 87       	std	Y+11, r24	; 0x0b
    1514:	9c 87       	std	Y+12, r25	; 0x0c
    1516:	ad 87       	std	Y+13, r26	; 0x0d
    1518:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151a:	6b 85       	ldd	r22, Y+11	; 0x0b
    151c:	7c 85       	ldd	r23, Y+12	; 0x0c
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4a ef       	ldi	r20, 0xFA	; 250
    1528:	54 e4       	ldi	r21, 0x44	; 68
    152a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8f 83       	std	Y+7, r24	; 0x07
    1534:	98 87       	std	Y+8, r25	; 0x08
    1536:	a9 87       	std	Y+9, r26	; 0x09
    1538:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    153a:	6f 81       	ldd	r22, Y+7	; 0x07
    153c:	78 85       	ldd	r23, Y+8	; 0x08
    153e:	89 85       	ldd	r24, Y+9	; 0x09
    1540:	9a 85       	ldd	r25, Y+10	; 0x0a
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    154e:	88 23       	and	r24, r24
    1550:	2c f4       	brge	.+10     	; 0x155c <Hstepper_rotate_CW+0x3ec>
		__ticks = 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
    155a:	3f c0       	rjmp	.+126    	; 0x15da <Hstepper_rotate_CW+0x46a>
	else if (__tmp > 65535)
    155c:	6f 81       	ldd	r22, Y+7	; 0x07
    155e:	78 85       	ldd	r23, Y+8	; 0x08
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	3f ef       	ldi	r19, 0xFF	; 255
    1568:	4f e7       	ldi	r20, 0x7F	; 127
    156a:	57 e4       	ldi	r21, 0x47	; 71
    156c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1570:	18 16       	cp	r1, r24
    1572:	4c f5       	brge	.+82     	; 0x15c6 <Hstepper_rotate_CW+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1574:	6b 85       	ldd	r22, Y+11	; 0x0b
    1576:	7c 85       	ldd	r23, Y+12	; 0x0c
    1578:	8d 85       	ldd	r24, Y+13	; 0x0d
    157a:	9e 85       	ldd	r25, Y+14	; 0x0e
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e2       	ldi	r20, 0x20	; 32
    1582:	51 e4       	ldi	r21, 0x41	; 65
    1584:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <Hstepper_rotate_CW+0x44c>
    159e:	88 ec       	ldi	r24, 0xC8	; 200
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <Hstepper_rotate_CW+0x43a>
    15ae:	9c 83       	std	Y+4, r25	; 0x04
    15b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	69 f7       	brne	.-38     	; 0x159e <Hstepper_rotate_CW+0x42e>
    15c4:	14 c0       	rjmp	.+40     	; 0x15ee <Hstepper_rotate_CW+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c6:	6f 81       	ldd	r22, Y+7	; 0x07
    15c8:	78 85       	ldd	r23, Y+8	; 0x08
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <Hstepper_rotate_CW+0x476>
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	89 83       	std	Y+1, r24	; 0x01

	deg *= 107;
	deg /= 7 ;

	u16 i = 0;
	for (;i < deg;i++){
    15ee:	89 ad       	ldd	r24, Y+57	; 0x39
    15f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	9a af       	std	Y+58, r25	; 0x3a
    15f6:	89 af       	std	Y+57, r24	; 0x39
    15f8:	29 ad       	ldd	r18, Y+57	; 0x39
    15fa:	3a ad       	ldd	r19, Y+58	; 0x3a
    15fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    15fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1600:	28 17       	cp	r18, r24
    1602:	39 07       	cpc	r19, r25
    1604:	08 f4       	brcc	.+2      	; 0x1608 <Hstepper_rotate_CW+0x498>
    1606:	db cd       	rjmp	.-1098   	; 0x11be <Hstepper_rotate_CW+0x4e>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_HIGH);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
		_delay_ms(2);
	}

}
    1608:	ec 96       	adiw	r28, 0x3c	; 60
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Hstepper_rotate_ACW>:

void Hstepper_rotate_ACW (u16 deg){
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	ec 97       	sbiw	r28, 0x3c	; 60
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	9c af       	std	Y+60, r25	; 0x3c
    1630:	8b af       	std	Y+59, r24	; 0x3b
	deg *= 104;
    1632:	2b ad       	ldd	r18, Y+59	; 0x3b
    1634:	3c ad       	ldd	r19, Y+60	; 0x3c
    1636:	88 e6       	ldi	r24, 0x68	; 104
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	ac 01       	movw	r20, r24
    163c:	24 9f       	mul	r18, r20
    163e:	c0 01       	movw	r24, r0
    1640:	25 9f       	mul	r18, r21
    1642:	90 0d       	add	r25, r0
    1644:	34 9f       	mul	r19, r20
    1646:	90 0d       	add	r25, r0
    1648:	11 24       	eor	r1, r1
    164a:	9c af       	std	Y+60, r25	; 0x3c
    164c:	8b af       	std	Y+59, r24	; 0x3b
	deg /= 7 ;
    164e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1650:	9c ad       	ldd	r25, Y+60	; 0x3c
    1652:	27 e0       	ldi	r18, 0x07	; 7
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	b9 01       	movw	r22, r18
    1658:	0e 94 de 11 	call	0x23bc	; 0x23bc <__udivmodhi4>
    165c:	cb 01       	movw	r24, r22
    165e:	9c af       	std	Y+60, r25	; 0x3c
    1660:	8b af       	std	Y+59, r24	; 0x3b
	u16 i = 0;
    1662:	1a ae       	std	Y+58, r1	; 0x3a
    1664:	19 ae       	std	Y+57, r1	; 0x39
    1666:	1d c2       	rjmp	.+1082   	; 0x1aa2 <Hstepper_rotate_ACW+0x488>
	for (;i < deg;i++){

		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_HIGH);
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    1672:	82 e0       	ldi	r24, 0x02	; 2
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	62 e0       	ldi	r22, 0x02	; 2
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e4       	ldi	r27, 0x40	; 64
    1698:	8d ab       	std	Y+53, r24	; 0x35
    169a:	9e ab       	std	Y+54, r25	; 0x36
    169c:	af ab       	std	Y+55, r26	; 0x37
    169e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	6d a9       	ldd	r22, Y+53	; 0x35
    16a2:	7e a9       	ldd	r23, Y+54	; 0x36
    16a4:	8f a9       	ldd	r24, Y+55	; 0x37
    16a6:	98 ad       	ldd	r25, Y+56	; 0x38
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a ef       	ldi	r20, 0xFA	; 250
    16ae:	54 e4       	ldi	r21, 0x44	; 68
    16b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	89 ab       	std	Y+49, r24	; 0x31
    16ba:	9a ab       	std	Y+50, r25	; 0x32
    16bc:	ab ab       	std	Y+51, r26	; 0x33
    16be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16c0:	69 a9       	ldd	r22, Y+49	; 0x31
    16c2:	7a a9       	ldd	r23, Y+50	; 0x32
    16c4:	8b a9       	ldd	r24, Y+51	; 0x33
    16c6:	9c a9       	ldd	r25, Y+52	; 0x34
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5f e3       	ldi	r21, 0x3F	; 63
    16d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16d4:	88 23       	and	r24, r24
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <Hstepper_rotate_ACW+0xc8>
		__ticks = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	98 ab       	std	Y+48, r25	; 0x30
    16de:	8f a7       	std	Y+47, r24	; 0x2f
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <Hstepper_rotate_ACW+0x146>
	else if (__tmp > 65535)
    16e2:	69 a9       	ldd	r22, Y+49	; 0x31
    16e4:	7a a9       	ldd	r23, Y+50	; 0x32
    16e6:	8b a9       	ldd	r24, Y+51	; 0x33
    16e8:	9c a9       	ldd	r25, Y+52	; 0x34
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	4c f5       	brge	.+82     	; 0x174c <Hstepper_rotate_ACW+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	6d a9       	ldd	r22, Y+53	; 0x35
    16fc:	7e a9       	ldd	r23, Y+54	; 0x36
    16fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1700:	98 ad       	ldd	r25, Y+56	; 0x38
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	51 e4       	ldi	r21, 0x41	; 65
    170a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	98 ab       	std	Y+48, r25	; 0x30
    1720:	8f a7       	std	Y+47, r24	; 0x2f
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <Hstepper_rotate_ACW+0x128>
    1724:	88 ec       	ldi	r24, 0xC8	; 200
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9e a7       	std	Y+46, r25	; 0x2e
    172a:	8d a7       	std	Y+45, r24	; 0x2d
    172c:	8d a5       	ldd	r24, Y+45	; 0x2d
    172e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <Hstepper_rotate_ACW+0x116>
    1734:	9e a7       	std	Y+46, r25	; 0x2e
    1736:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	8f a5       	ldd	r24, Y+47	; 0x2f
    173a:	98 a9       	ldd	r25, Y+48	; 0x30
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	98 ab       	std	Y+48, r25	; 0x30
    1740:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	8f a5       	ldd	r24, Y+47	; 0x2f
    1744:	98 a9       	ldd	r25, Y+48	; 0x30
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f7       	brne	.-38     	; 0x1724 <Hstepper_rotate_ACW+0x10a>
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <Hstepper_rotate_ACW+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	69 a9       	ldd	r22, Y+49	; 0x31
    174e:	7a a9       	ldd	r23, Y+50	; 0x32
    1750:	8b a9       	ldd	r24, Y+51	; 0x33
    1752:	9c a9       	ldd	r25, Y+52	; 0x34
    1754:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	98 ab       	std	Y+48, r25	; 0x30
    175e:	8f a7       	std	Y+47, r24	; 0x2f
    1760:	8f a5       	ldd	r24, Y+47	; 0x2f
    1762:	98 a9       	ldd	r25, Y+48	; 0x30
    1764:	9c a7       	std	Y+44, r25	; 0x2c
    1766:	8b a7       	std	Y+43, r24	; 0x2b
    1768:	8b a5       	ldd	r24, Y+43	; 0x2b
    176a:	9c a5       	ldd	r25, Y+44	; 0x2c
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <Hstepper_rotate_ACW+0x152>
    1770:	9c a7       	std	Y+44, r25	; 0x2c
    1772:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	62 e0       	ldi	r22, 0x02	; 2
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_HIGH);
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	63 e0       	ldi	r22, 0x03	; 3
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e0       	ldi	r26, 0x00	; 0
    17a2:	b0 e4       	ldi	r27, 0x40	; 64
    17a4:	8f a3       	std	Y+39, r24	; 0x27
    17a6:	98 a7       	std	Y+40, r25	; 0x28
    17a8:	a9 a7       	std	Y+41, r26	; 0x29
    17aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ac:	6f a1       	ldd	r22, Y+39	; 0x27
    17ae:	78 a5       	ldd	r23, Y+40	; 0x28
    17b0:	89 a5       	ldd	r24, Y+41	; 0x29
    17b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	4a ef       	ldi	r20, 0xFA	; 250
    17ba:	54 e4       	ldi	r21, 0x44	; 68
    17bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	8b a3       	std	Y+35, r24	; 0x23
    17c6:	9c a3       	std	Y+36, r25	; 0x24
    17c8:	ad a3       	std	Y+37, r26	; 0x25
    17ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17cc:	6b a1       	ldd	r22, Y+35	; 0x23
    17ce:	7c a1       	ldd	r23, Y+36	; 0x24
    17d0:	8d a1       	ldd	r24, Y+37	; 0x25
    17d2:	9e a1       	ldd	r25, Y+38	; 0x26
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e8       	ldi	r20, 0x80	; 128
    17da:	5f e3       	ldi	r21, 0x3F	; 63
    17dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e0:	88 23       	and	r24, r24
    17e2:	2c f4       	brge	.+10     	; 0x17ee <Hstepper_rotate_ACW+0x1d4>
		__ticks = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9a a3       	std	Y+34, r25	; 0x22
    17ea:	89 a3       	std	Y+33, r24	; 0x21
    17ec:	3f c0       	rjmp	.+126    	; 0x186c <Hstepper_rotate_ACW+0x252>
	else if (__tmp > 65535)
    17ee:	6b a1       	ldd	r22, Y+35	; 0x23
    17f0:	7c a1       	ldd	r23, Y+36	; 0x24
    17f2:	8d a1       	ldd	r24, Y+37	; 0x25
    17f4:	9e a1       	ldd	r25, Y+38	; 0x26
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	3f ef       	ldi	r19, 0xFF	; 255
    17fa:	4f e7       	ldi	r20, 0x7F	; 127
    17fc:	57 e4       	ldi	r21, 0x47	; 71
    17fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1802:	18 16       	cp	r1, r24
    1804:	4c f5       	brge	.+82     	; 0x1858 <Hstepper_rotate_ACW+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1806:	6f a1       	ldd	r22, Y+39	; 0x27
    1808:	78 a5       	ldd	r23, Y+40	; 0x28
    180a:	89 a5       	ldd	r24, Y+41	; 0x29
    180c:	9a a5       	ldd	r25, Y+42	; 0x2a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
    182e:	0f c0       	rjmp	.+30     	; 0x184e <Hstepper_rotate_ACW+0x234>
    1830:	88 ec       	ldi	r24, 0xC8	; 200
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	98 a3       	std	Y+32, r25	; 0x20
    1836:	8f 8f       	std	Y+31, r24	; 0x1f
    1838:	8f 8d       	ldd	r24, Y+31	; 0x1f
    183a:	98 a1       	ldd	r25, Y+32	; 0x20
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <Hstepper_rotate_ACW+0x222>
    1840:	98 a3       	std	Y+32, r25	; 0x20
    1842:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	89 a1       	ldd	r24, Y+33	; 0x21
    1846:	9a a1       	ldd	r25, Y+34	; 0x22
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	9a a3       	std	Y+34, r25	; 0x22
    184c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184e:	89 a1       	ldd	r24, Y+33	; 0x21
    1850:	9a a1       	ldd	r25, Y+34	; 0x22
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	69 f7       	brne	.-38     	; 0x1830 <Hstepper_rotate_ACW+0x216>
    1856:	14 c0       	rjmp	.+40     	; 0x1880 <Hstepper_rotate_ACW+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1858:	6b a1       	ldd	r22, Y+35	; 0x23
    185a:	7c a1       	ldd	r23, Y+36	; 0x24
    185c:	8d a1       	ldd	r24, Y+37	; 0x25
    185e:	9e a1       	ldd	r25, Y+38	; 0x26
    1860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9a a3       	std	Y+34, r25	; 0x22
    186a:	89 a3       	std	Y+33, r24	; 0x21
    186c:	89 a1       	ldd	r24, Y+33	; 0x21
    186e:	9a a1       	ldd	r25, Y+34	; 0x22
    1870:	9e 8f       	std	Y+30, r25	; 0x1e
    1872:	8d 8f       	std	Y+29, r24	; 0x1d
    1874:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1876:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <Hstepper_rotate_ACW+0x25e>
    187c:	9e 8f       	std	Y+30, r25	; 0x1e
    187e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_HIGH);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	62 e0       	ldi	r22, 0x02	; 2
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	63 e0       	ldi	r22, 0x03	; 3
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e4       	ldi	r27, 0x40	; 64
    18b0:	89 8f       	std	Y+25, r24	; 0x19
    18b2:	9a 8f       	std	Y+26, r25	; 0x1a
    18b4:	ab 8f       	std	Y+27, r26	; 0x1b
    18b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a ef       	ldi	r20, 0xFA	; 250
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8d 8b       	std	Y+21, r24	; 0x15
    18d2:	9e 8b       	std	Y+22, r25	; 0x16
    18d4:	af 8b       	std	Y+23, r26	; 0x17
    18d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d8:	6d 89       	ldd	r22, Y+21	; 0x15
    18da:	7e 89       	ldd	r23, Y+22	; 0x16
    18dc:	8f 89       	ldd	r24, Y+23	; 0x17
    18de:	98 8d       	ldd	r25, Y+24	; 0x18
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <Hstepper_rotate_ACW+0x2e0>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9c 8b       	std	Y+20, r25	; 0x14
    18f6:	8b 8b       	std	Y+19, r24	; 0x13
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <Hstepper_rotate_ACW+0x35e>
	else if (__tmp > 65535)
    18fa:	6d 89       	ldd	r22, Y+21	; 0x15
    18fc:	7e 89       	ldd	r23, Y+22	; 0x16
    18fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1900:	98 8d       	ldd	r25, Y+24	; 0x18
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <Hstepper_rotate_ACW+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	69 8d       	ldd	r22, Y+25	; 0x19
    1914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9c 8b       	std	Y+20, r25	; 0x14
    1938:	8b 8b       	std	Y+19, r24	; 0x13
    193a:	0f c0       	rjmp	.+30     	; 0x195a <Hstepper_rotate_ACW+0x340>
    193c:	88 ec       	ldi	r24, 0xC8	; 200
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9a 8b       	std	Y+18, r25	; 0x12
    1942:	89 8b       	std	Y+17, r24	; 0x11
    1944:	89 89       	ldd	r24, Y+17	; 0x11
    1946:	9a 89       	ldd	r25, Y+18	; 0x12
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <Hstepper_rotate_ACW+0x32e>
    194c:	9a 8b       	std	Y+18, r25	; 0x12
    194e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9c 8b       	std	Y+20, r25	; 0x14
    1958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	8b 89       	ldd	r24, Y+19	; 0x13
    195c:	9c 89       	ldd	r25, Y+20	; 0x14
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <Hstepper_rotate_ACW+0x322>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <Hstepper_rotate_ACW+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6d 89       	ldd	r22, Y+21	; 0x15
    1966:	7e 89       	ldd	r23, Y+22	; 0x16
    1968:	8f 89       	ldd	r24, Y+23	; 0x17
    196a:	98 8d       	ldd	r25, Y+24	; 0x18
    196c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9c 8b       	std	Y+20, r25	; 0x14
    1976:	8b 8b       	std	Y+19, r24	; 0x13
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	98 8b       	std	Y+16, r25	; 0x10
    197e:	8f 87       	std	Y+15, r24	; 0x0f
    1980:	8f 85       	ldd	r24, Y+15	; 0x0f
    1982:	98 89       	ldd	r25, Y+16	; 0x10
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <Hstepper_rotate_ACW+0x36a>
    1988:	98 8b       	std	Y+16, r25	; 0x10
    198a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_HIGH);
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	63 e0       	ldi	r22, 0x03	; 3
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a0 e0       	ldi	r26, 0x00	; 0
    19ba:	b0 e4       	ldi	r27, 0x40	; 64
    19bc:	8b 87       	std	Y+11, r24	; 0x0b
    19be:	9c 87       	std	Y+12, r25	; 0x0c
    19c0:	ad 87       	std	Y+13, r26	; 0x0d
    19c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	4a ef       	ldi	r20, 0xFA	; 250
    19d2:	54 e4       	ldi	r21, 0x44	; 68
    19d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8f 83       	std	Y+7, r24	; 0x07
    19de:	98 87       	std	Y+8, r25	; 0x08
    19e0:	a9 87       	std	Y+9, r26	; 0x09
    19e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e4:	6f 81       	ldd	r22, Y+7	; 0x07
    19e6:	78 85       	ldd	r23, Y+8	; 0x08
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <Hstepper_rotate_ACW+0x3ec>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <Hstepper_rotate_ACW+0x46a>
	else if (__tmp > 65535)
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <Hstepper_rotate_ACW+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <Hstepper_rotate_ACW+0x44c>
    1a48:	88 ec       	ldi	r24, 0xC8	; 200
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <Hstepper_rotate_ACW+0x43a>
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <Hstepper_rotate_ACW+0x42e>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <Hstepper_rotate_ACW+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <Hstepper_rotate_ACW+0x476>
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01

void Hstepper_rotate_ACW (u16 deg){
	deg *= 104;
	deg /= 7 ;
	u16 i = 0;
	for (;i < deg;i++){
    1a98:	89 ad       	ldd	r24, Y+57	; 0x39
    1a9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	9a af       	std	Y+58, r25	; 0x3a
    1aa0:	89 af       	std	Y+57, r24	; 0x39
    1aa2:	29 ad       	ldd	r18, Y+57	; 0x39
    1aa4:	3a ad       	ldd	r19, Y+58	; 0x3a
    1aa6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1aa8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1aaa:	28 17       	cp	r18, r24
    1aac:	39 07       	cpc	r19, r25
    1aae:	08 f4       	brcc	.+2      	; 0x1ab2 <Hstepper_rotate_ACW+0x498>
    1ab0:	db cd       	rjmp	.-1098   	; 0x1668 <Hstepper_rotate_ACW+0x4e>
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
		MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
		_delay_ms(2);
	}

}
    1ab2:	ec 96       	adiw	r28, 0x3c	; 60
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <Hstepper_stop>:


void Hstepper_stop(){
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62

	MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_BLUE_PIN 	, DIO_LOW);
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_PINK_PIN 	, DIO_LOW);
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_YELLOW_PIN, DIO_LOW);
    1ae0:	82 e0       	ldi	r24, 0x02	; 2
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(HSTPPER_Port, HSTPPER_ORANGE_PIN, DIO_LOW);
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	63 e0       	ldi	r22, 0x03	; 3
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
}
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <Port_voidInit>:
#include "MDIO_interface.h"
#include "MDIO_registers.h"
#include "MDIO_private.h"
#include "MDIO_config.h"

void Port_voidInit(void){
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
    1b02:	ea e3       	ldi	r30, 0x3A	; 58
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 ef       	ldi	r24, 0xF0	; 240
    1b08:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1b0a:	e7 e3       	ldi	r30, 0x37	; 55
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8f e0       	ldi	r24, 0x0F	; 15
    1b10:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1b12:	e4 e3       	ldi	r30, 0x34	; 52
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
    1b18:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1b1a:	e1 e3       	ldi	r30, 0x31	; 49
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	8f e1       	ldi	r24, 0x1F	; 31
    1b20:	80 83       	st	Z, r24
	PORTA = PORTA_INITAL_VAL;
    1b22:	eb e3       	ldi	r30, 0x3B	; 59
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	10 82       	st	Z, r1
	PORTB = PORTB_INITAL_VAL;
    1b28:	e8 e3       	ldi	r30, 0x38	; 56
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	10 82       	st	Z, r1
	PORTC = PORTC_INITAL_VAL;
    1b2e:	e5 e3       	ldi	r30, 0x35	; 53
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	10 82       	st	Z, r1
	PORTD = PORTD_INITAL_VAL;
    1b34:	e2 e3       	ldi	r30, 0x32	; 50
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	10 82       	st	Z, r1





}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <MDIO_ErrorS_EnablePinPullUp>:
Error_State_t MDIO_ErrorS_EnablePinPullUp( u8 Copy_u8Port , u8 Copy_u8Pin){
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <MDIO_ErrorS_EnablePinPullUp+0x6>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <MDIO_ErrorS_EnablePinPullUp+0x8>
    1b48:	0f 92       	push	r0
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
    1b50:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    1b52:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin > 7){
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 30       	cpi	r24, 0x08	; 8
    1b58:	10 f0       	brcs	.+4      	; 0x1b5e <MDIO_ErrorS_EnablePinPullUp+0x1e>
		errorState = return_Nok;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	89 83       	std	Y+1, r24	; 0x01
	}

	SFIOR &= ~(1<<2);
    1b5e:	a0 e5       	ldi	r26, 0x50	; 80
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e0 e5       	ldi	r30, 0x50	; 80
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8b 7f       	andi	r24, 0xFB	; 251
    1b6a:	8c 93       	st	X, r24
	switch (Copy_u8Port){
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	3d 83       	std	Y+5, r19	; 0x05
    1b74:	2c 83       	std	Y+4, r18	; 0x04
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	51 f1       	breq	.+84     	; 0x1bd4 <MDIO_ErrorS_EnablePinPullUp+0x94>
    1b80:	2c 81       	ldd	r18, Y+4	; 0x04
    1b82:	3d 81       	ldd	r19, Y+5	; 0x05
    1b84:	23 30       	cpi	r18, 0x03	; 3
    1b86:	31 05       	cpc	r19, r1
    1b88:	34 f4       	brge	.+12     	; 0x1b96 <MDIO_ErrorS_EnablePinPullUp+0x56>
    1b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	91 05       	cpc	r25, r1
    1b92:	61 f0       	breq	.+24     	; 0x1bac <MDIO_ErrorS_EnablePinPullUp+0x6c>
    1b94:	5b c0       	rjmp	.+182    	; 0x1c4c <MDIO_ErrorS_EnablePinPullUp+0x10c>
    1b96:	2c 81       	ldd	r18, Y+4	; 0x04
    1b98:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9a:	23 30       	cpi	r18, 0x03	; 3
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	71 f1       	breq	.+92     	; 0x1bfc <MDIO_ErrorS_EnablePinPullUp+0xbc>
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba4:	84 30       	cpi	r24, 0x04	; 4
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	e9 f1       	breq	.+122    	; 0x1c24 <MDIO_ErrorS_EnablePinPullUp+0xe4>
    1baa:	50 c0       	rjmp	.+160    	; 0x1c4c <MDIO_ErrorS_EnablePinPullUp+0x10c>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    1bac:	ab e3       	ldi	r26, 0x3B	; 59
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	eb e3       	ldi	r30, 0x3B	; 59
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	48 2f       	mov	r20, r24
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 2e       	mov	r0, r18
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <MDIO_ErrorS_EnablePinPullUp+0x8a>
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	0a 94       	dec	r0
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <MDIO_ErrorS_EnablePinPullUp+0x86>
    1bce:	84 2b       	or	r24, r20
    1bd0:	8c 93       	st	X, r24
    1bd2:	3e c0       	rjmp	.+124    	; 0x1c50 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    1bd4:	a8 e3       	ldi	r26, 0x38	; 56
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e8 e3       	ldi	r30, 0x38	; 56
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	48 2f       	mov	r20, r24
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	02 2e       	mov	r0, r18
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <MDIO_ErrorS_EnablePinPullUp+0xb2>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	0a 94       	dec	r0
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <MDIO_ErrorS_EnablePinPullUp+0xae>
    1bf6:	84 2b       	or	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	2a c0       	rjmp	.+84     	; 0x1c50 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    1bfc:	a5 e3       	ldi	r26, 0x35	; 53
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e5 e3       	ldi	r30, 0x35	; 53
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <MDIO_ErrorS_EnablePinPullUp+0xda>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <MDIO_ErrorS_EnablePinPullUp+0xd6>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	16 c0       	rjmp	.+44     	; 0x1c50 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    1c24:	a2 e3       	ldi	r26, 0x32	; 50
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e2 e3       	ldi	r30, 0x32	; 50
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <MDIO_ErrorS_EnablePinPullUp+0x102>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <MDIO_ErrorS_EnablePinPullUp+0xfe>
    1c46:	84 2b       	or	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <MDIO_ErrorS_EnablePinPullUp+0x110>
					default: errorState = return_Nok; break;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
				}
	return errorState;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	27 97       	sbiw	r28, 0x07	; 7
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	6a 83       	std	Y+2, r22	; 0x02
    1c7a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Mode == DIO_INPUT){
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <MDIO_voidSetPinDirection+0x22>
    1c82:	75 c0       	rjmp	.+234    	; 0x1d6e <MDIO_voidSetPinDirection+0x10c>
			switch (Copy_u8Port){
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	3f 83       	std	Y+7, r19	; 0x07
    1c8c:	2e 83       	std	Y+6, r18	; 0x06
    1c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c90:	9f 81       	ldd	r25, Y+7	; 0x07
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	91 05       	cpc	r25, r1
    1c96:	61 f1       	breq	.+88     	; 0x1cf0 <MDIO_voidSetPinDirection+0x8e>
    1c98:	2e 81       	ldd	r18, Y+6	; 0x06
    1c9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c9c:	23 30       	cpi	r18, 0x03	; 3
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	34 f4       	brge	.+12     	; 0x1cae <MDIO_voidSetPinDirection+0x4c>
    1ca2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	91 05       	cpc	r25, r1
    1caa:	69 f0       	breq	.+26     	; 0x1cc6 <MDIO_voidSetPinDirection+0x64>
    1cac:	d3 c0       	rjmp	.+422    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
    1cae:	2e 81       	ldd	r18, Y+6	; 0x06
    1cb0:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb2:	23 30       	cpi	r18, 0x03	; 3
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	89 f1       	breq	.+98     	; 0x1d1a <MDIO_voidSetPinDirection+0xb8>
    1cb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cba:	9f 81       	ldd	r25, Y+7	; 0x07
    1cbc:	84 30       	cpi	r24, 0x04	; 4
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <MDIO_voidSetPinDirection+0x62>
    1cc2:	40 c0       	rjmp	.+128    	; 0x1d44 <MDIO_voidSetPinDirection+0xe2>
    1cc4:	c7 c0       	rjmp	.+398    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin);break;
    1cc6:	aa e3       	ldi	r26, 0x3A	; 58
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ea e3       	ldi	r30, 0x3A	; 58
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <MDIO_voidSetPinDirection+0x82>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <MDIO_voidSetPinDirection+0x7e>
    1ce8:	80 95       	com	r24
    1cea:	84 23       	and	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	b2 c0       	rjmp	.+356    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    1cf0:	a7 e3       	ldi	r26, 0x37	; 55
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e7 e3       	ldi	r30, 0x37	; 55
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <MDIO_voidSetPinDirection+0xac>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <MDIO_voidSetPinDirection+0xa8>
    1d12:	80 95       	com	r24
    1d14:	84 23       	and	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	9d c0       	rjmp	.+314    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    1d1a:	a4 e3       	ldi	r26, 0x34	; 52
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e4 e3       	ldi	r30, 0x34	; 52
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <MDIO_voidSetPinDirection+0xd6>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <MDIO_voidSetPinDirection+0xd2>
    1d3c:	80 95       	com	r24
    1d3e:	84 23       	and	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	88 c0       	rjmp	.+272    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    1d44:	a1 e3       	ldi	r26, 0x31	; 49
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	e1 e3       	ldi	r30, 0x31	; 49
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 2e       	mov	r0, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <MDIO_voidSetPinDirection+0x100>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <MDIO_voidSetPinDirection+0xfc>
    1d66:	80 95       	com	r24
    1d68:	84 23       	and	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	73 c0       	rjmp	.+230    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				default: break;
			}

	}
	else if(Copy_U8Mode == DIO_OUTPUT){
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <MDIO_voidSetPinDirection+0x114>
    1d74:	6f c0       	rjmp	.+222    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
			switch (Copy_u8Port){
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	3d 83       	std	Y+5, r19	; 0x05
    1d7e:	2c 83       	std	Y+4, r18	; 0x04
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	9d 81       	ldd	r25, Y+5	; 0x05
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	91 05       	cpc	r25, r1
    1d88:	51 f1       	breq	.+84     	; 0x1dde <MDIO_voidSetPinDirection+0x17c>
    1d8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8e:	23 30       	cpi	r18, 0x03	; 3
    1d90:	31 05       	cpc	r19, r1
    1d92:	34 f4       	brge	.+12     	; 0x1da0 <MDIO_voidSetPinDirection+0x13e>
    1d94:	8c 81       	ldd	r24, Y+4	; 0x04
    1d96:	9d 81       	ldd	r25, Y+5	; 0x05
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	61 f0       	breq	.+24     	; 0x1db6 <MDIO_voidSetPinDirection+0x154>
    1d9e:	5a c0       	rjmp	.+180    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
    1da0:	2c 81       	ldd	r18, Y+4	; 0x04
    1da2:	3d 81       	ldd	r19, Y+5	; 0x05
    1da4:	23 30       	cpi	r18, 0x03	; 3
    1da6:	31 05       	cpc	r19, r1
    1da8:	71 f1       	breq	.+92     	; 0x1e06 <MDIO_voidSetPinDirection+0x1a4>
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	9d 81       	ldd	r25, Y+5	; 0x05
    1dae:	84 30       	cpi	r24, 0x04	; 4
    1db0:	91 05       	cpc	r25, r1
    1db2:	e9 f1       	breq	.+122    	; 0x1e2e <MDIO_voidSetPinDirection+0x1cc>
    1db4:	4f c0       	rjmp	.+158    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin);break;
    1db6:	aa e3       	ldi	r26, 0x3A	; 58
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	ea e3       	ldi	r30, 0x3A	; 58
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	48 2f       	mov	r20, r24
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	02 2e       	mov	r0, r18
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <MDIO_voidSetPinDirection+0x172>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	0a 94       	dec	r0
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <MDIO_voidSetPinDirection+0x16e>
    1dd8:	84 2b       	or	r24, r20
    1dda:	8c 93       	st	X, r24
    1ddc:	3b c0       	rjmp	.+118    	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    1dde:	a7 e3       	ldi	r26, 0x37	; 55
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e7 e3       	ldi	r30, 0x37	; 55
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	48 2f       	mov	r20, r24
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	02 2e       	mov	r0, r18
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <MDIO_voidSetPinDirection+0x19a>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0a 94       	dec	r0
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <MDIO_voidSetPinDirection+0x196>
    1e00:	84 2b       	or	r24, r20
    1e02:	8c 93       	st	X, r24
    1e04:	27 c0       	rjmp	.+78     	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    1e06:	a4 e3       	ldi	r26, 0x34	; 52
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e4 e3       	ldi	r30, 0x34	; 52
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <MDIO_voidSetPinDirection+0x1c2>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <MDIO_voidSetPinDirection+0x1be>
    1e28:	84 2b       	or	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	13 c0       	rjmp	.+38     	; 0x1e54 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    1e2e:	a1 e3       	ldi	r26, 0x31	; 49
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e1 e3       	ldi	r30, 0x31	; 49
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <MDIO_voidSetPinDirection+0x1ea>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <MDIO_voidSetPinDirection+0x1e6>
    1e50:	84 2b       	or	r24, r20
    1e52:	8c 93       	st	X, r24
				default: break;
			}
	}

}
    1e54:	27 96       	adiw	r28, 0x07	; 7
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <MDIO_ErrorS_SetPinValue>:
Error_State_t MDIO_ErrorS_SetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	28 97       	sbiw	r28, 0x08	; 8
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
    1e7c:	6b 83       	std	Y+3, r22	; 0x03
    1e7e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    1e80:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	88 30       	cpi	r24, 0x08	; 8
    1e86:	10 f0       	brcs	.+4      	; 0x1e8c <MDIO_ErrorS_SetPinValue+0x26>
		errorState = return_Nok;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	89 83       	std	Y+1, r24	; 0x01
	}

	if(Copy_U8Mode == DIO_LOW){
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	88 23       	and	r24, r24
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <MDIO_ErrorS_SetPinValue+0x2e>
    1e92:	78 c0       	rjmp	.+240    	; 0x1f84 <MDIO_ErrorS_SetPinValue+0x11e>
				switch (Copy_u8Port){
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	38 87       	std	Y+8, r19	; 0x08
    1e9c:	2f 83       	std	Y+7, r18	; 0x07
    1e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea0:	98 85       	ldd	r25, Y+8	; 0x08
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	61 f1       	breq	.+88     	; 0x1f00 <MDIO_ErrorS_SetPinValue+0x9a>
    1ea8:	2f 81       	ldd	r18, Y+7	; 0x07
    1eaa:	38 85       	ldd	r19, Y+8	; 0x08
    1eac:	23 30       	cpi	r18, 0x03	; 3
    1eae:	31 05       	cpc	r19, r1
    1eb0:	34 f4       	brge	.+12     	; 0x1ebe <MDIO_ErrorS_SetPinValue+0x58>
    1eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb4:	98 85       	ldd	r25, Y+8	; 0x08
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	69 f0       	breq	.+26     	; 0x1ed6 <MDIO_ErrorS_SetPinValue+0x70>
    1ebc:	60 c0       	rjmp	.+192    	; 0x1f7e <MDIO_ErrorS_SetPinValue+0x118>
    1ebe:	2f 81       	ldd	r18, Y+7	; 0x07
    1ec0:	38 85       	ldd	r19, Y+8	; 0x08
    1ec2:	23 30       	cpi	r18, 0x03	; 3
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	89 f1       	breq	.+98     	; 0x1f2a <MDIO_ErrorS_SetPinValue+0xc4>
    1ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eca:	98 85       	ldd	r25, Y+8	; 0x08
    1ecc:	84 30       	cpi	r24, 0x04	; 4
    1ece:	91 05       	cpc	r25, r1
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <MDIO_ErrorS_SetPinValue+0x6e>
    1ed2:	40 c0       	rjmp	.+128    	; 0x1f54 <MDIO_ErrorS_SetPinValue+0xee>
    1ed4:	54 c0       	rjmp	.+168    	; 0x1f7e <MDIO_ErrorS_SetPinValue+0x118>
					case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
    1ed6:	ab e3       	ldi	r26, 0x3B	; 59
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	eb e3       	ldi	r30, 0x3B	; 59
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <MDIO_ErrorS_SetPinValue+0x8e>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <MDIO_ErrorS_SetPinValue+0x8a>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	b8 c0       	rjmp	.+368    	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    1f00:	a8 e3       	ldi	r26, 0x38	; 56
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e8 e3       	ldi	r30, 0x38	; 56
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <MDIO_ErrorS_SetPinValue+0xb8>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <MDIO_ErrorS_SetPinValue+0xb4>
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	a3 c0       	rjmp	.+326    	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    1f2a:	a5 e3       	ldi	r26, 0x35	; 53
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e5 e3       	ldi	r30, 0x35	; 53
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <MDIO_ErrorS_SetPinValue+0xe2>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <MDIO_ErrorS_SetPinValue+0xde>
    1f4c:	80 95       	com	r24
    1f4e:	84 23       	and	r24, r20
    1f50:	8c 93       	st	X, r24
    1f52:	8e c0       	rjmp	.+284    	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    1f54:	a2 e3       	ldi	r26, 0x32	; 50
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e2 e3       	ldi	r30, 0x32	; 50
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <MDIO_ErrorS_SetPinValue+0x10c>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <MDIO_ErrorS_SetPinValue+0x108>
    1f76:	80 95       	com	r24
    1f78:	84 23       	and	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	79 c0       	rjmp	.+242    	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
					default: errorState = return_Nok; break;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	76 c0       	rjmp	.+236    	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
				}

		}
		else if(Copy_U8Mode == DIO_HIGH){
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <MDIO_ErrorS_SetPinValue+0x126>
    1f8a:	72 c0       	rjmp	.+228    	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
				switch (Copy_u8Port){
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	3e 83       	std	Y+6, r19	; 0x06
    1f94:	2d 83       	std	Y+5, r18	; 0x05
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	82 30       	cpi	r24, 0x02	; 2
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	51 f1       	breq	.+84     	; 0x1ff4 <MDIO_ErrorS_SetPinValue+0x18e>
    1fa0:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa2:	3e 81       	ldd	r19, Y+6	; 0x06
    1fa4:	23 30       	cpi	r18, 0x03	; 3
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	34 f4       	brge	.+12     	; 0x1fb6 <MDIO_ErrorS_SetPinValue+0x150>
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	61 f0       	breq	.+24     	; 0x1fcc <MDIO_ErrorS_SetPinValue+0x166>
    1fb4:	5b c0       	rjmp	.+182    	; 0x206c <MDIO_ErrorS_SetPinValue+0x206>
    1fb6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fb8:	3e 81       	ldd	r19, Y+6	; 0x06
    1fba:	23 30       	cpi	r18, 0x03	; 3
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	71 f1       	breq	.+92     	; 0x201c <MDIO_ErrorS_SetPinValue+0x1b6>
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	84 30       	cpi	r24, 0x04	; 4
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	e9 f1       	breq	.+122    	; 0x2044 <MDIO_ErrorS_SetPinValue+0x1de>
    1fca:	50 c0       	rjmp	.+160    	; 0x206c <MDIO_ErrorS_SetPinValue+0x206>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    1fcc:	ab e3       	ldi	r26, 0x3B	; 59
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	eb e3       	ldi	r30, 0x3B	; 59
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <MDIO_ErrorS_SetPinValue+0x184>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <MDIO_ErrorS_SetPinValue+0x180>
    1fee:	84 2b       	or	r24, r20
    1ff0:	8c 93       	st	X, r24
    1ff2:	3e c0       	rjmp	.+124    	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    1ff4:	a8 e3       	ldi	r26, 0x38	; 56
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e8 e3       	ldi	r30, 0x38	; 56
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	48 2f       	mov	r20, r24
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	02 2e       	mov	r0, r18
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <MDIO_ErrorS_SetPinValue+0x1ac>
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	0a 94       	dec	r0
    2014:	e2 f7       	brpl	.-8      	; 0x200e <MDIO_ErrorS_SetPinValue+0x1a8>
    2016:	84 2b       	or	r24, r20
    2018:	8c 93       	st	X, r24
    201a:	2a c0       	rjmp	.+84     	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    201c:	a5 e3       	ldi	r26, 0x35	; 53
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e3       	ldi	r30, 0x35	; 53
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	48 2f       	mov	r20, r24
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <MDIO_ErrorS_SetPinValue+0x1d4>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <MDIO_ErrorS_SetPinValue+0x1d0>
    203e:	84 2b       	or	r24, r20
    2040:	8c 93       	st	X, r24
    2042:	16 c0       	rjmp	.+44     	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    2044:	a2 e3       	ldi	r26, 0x32	; 50
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e2 e3       	ldi	r30, 0x32	; 50
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	48 2f       	mov	r20, r24
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	02 2e       	mov	r0, r18
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <MDIO_ErrorS_SetPinValue+0x1fc>
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	0a 94       	dec	r0
    2064:	e2 f7       	brpl	.-8      	; 0x205e <MDIO_ErrorS_SetPinValue+0x1f8>
    2066:	84 2b       	or	r24, r20
    2068:	8c 93       	st	X, r24
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <MDIO_ErrorS_SetPinValue+0x20a>
					default:errorState = return_Nok; break;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	89 83       	std	Y+1, r24	; 0x01
				}
		}
	return errorState;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
}
    2072:	28 96       	adiw	r28, 0x08	; 8
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <MDIO_ErrorS_GetPinValue>:

Error_State_t MDIO_ErrorS_GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8* P_u8Value ){
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	27 97       	sbiw	r28, 0x07	; 7
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	8a 83       	std	Y+2, r24	; 0x02
    209a:	6b 83       	std	Y+3, r22	; 0x03
    209c:	5d 83       	std	Y+5, r21	; 0x05
    209e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    20a0:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	88 30       	cpi	r24, 0x08	; 8
    20a6:	10 f0       	brcs	.+4      	; 0x20ac <MDIO_ErrorS_GetPinValue+0x28>
			errorState = return_Nok;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	89 83       	std	Y+1, r24	; 0x01
		}

	switch (Copy_u8Port){
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3f 83       	std	Y+7, r19	; 0x07
    20b4:	2e 83       	std	Y+6, r18	; 0x06
    20b6:	4e 81       	ldd	r20, Y+6	; 0x06
    20b8:	5f 81       	ldd	r21, Y+7	; 0x07
    20ba:	42 30       	cpi	r20, 0x02	; 2
    20bc:	51 05       	cpc	r21, r1
    20be:	59 f1       	breq	.+86     	; 0x2116 <MDIO_ErrorS_GetPinValue+0x92>
    20c0:	8e 81       	ldd	r24, Y+6	; 0x06
    20c2:	9f 81       	ldd	r25, Y+7	; 0x07
    20c4:	83 30       	cpi	r24, 0x03	; 3
    20c6:	91 05       	cpc	r25, r1
    20c8:	34 f4       	brge	.+12     	; 0x20d6 <MDIO_ErrorS_GetPinValue+0x52>
    20ca:	2e 81       	ldd	r18, Y+6	; 0x06
    20cc:	3f 81       	ldd	r19, Y+7	; 0x07
    20ce:	21 30       	cpi	r18, 0x01	; 1
    20d0:	31 05       	cpc	r19, r1
    20d2:	69 f0       	breq	.+26     	; 0x20ee <MDIO_ErrorS_GetPinValue+0x6a>
    20d4:	5c c0       	rjmp	.+184    	; 0x218e <MDIO_ErrorS_GetPinValue+0x10a>
    20d6:	4e 81       	ldd	r20, Y+6	; 0x06
    20d8:	5f 81       	ldd	r21, Y+7	; 0x07
    20da:	43 30       	cpi	r20, 0x03	; 3
    20dc:	51 05       	cpc	r21, r1
    20de:	79 f1       	breq	.+94     	; 0x213e <MDIO_ErrorS_GetPinValue+0xba>
    20e0:	8e 81       	ldd	r24, Y+6	; 0x06
    20e2:	9f 81       	ldd	r25, Y+7	; 0x07
    20e4:	84 30       	cpi	r24, 0x04	; 4
    20e6:	91 05       	cpc	r25, r1
    20e8:	09 f4       	brne	.+2      	; 0x20ec <MDIO_ErrorS_GetPinValue+0x68>
    20ea:	3d c0       	rjmp	.+122    	; 0x2166 <MDIO_ErrorS_GetPinValue+0xe2>
    20ec:	50 c0       	rjmp	.+160    	; 0x218e <MDIO_ErrorS_GetPinValue+0x10a>
						case DIO_PORTA : *P_u8Value = GET_BIT(PINA,Copy_u8Pin);break;
    20ee:	e9 e3       	ldi	r30, 0x39	; 57
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a9 01       	movw	r20, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <MDIO_ErrorS_GetPinValue+0x82>
    2102:	55 95       	asr	r21
    2104:	47 95       	ror	r20
    2106:	8a 95       	dec	r24
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <MDIO_ErrorS_GetPinValue+0x7e>
    210a:	ca 01       	movw	r24, r20
    210c:	81 70       	andi	r24, 0x01	; 1
    210e:	ec 81       	ldd	r30, Y+4	; 0x04
    2110:	fd 81       	ldd	r31, Y+5	; 0x05
    2112:	80 83       	st	Z, r24
    2114:	3e c0       	rjmp	.+124    	; 0x2192 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTB : *P_u8Value = GET_BIT(PINB,Copy_u8Pin);break;
    2116:	e6 e3       	ldi	r30, 0x36	; 54
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a9 01       	movw	r20, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <MDIO_ErrorS_GetPinValue+0xaa>
    212a:	55 95       	asr	r21
    212c:	47 95       	ror	r20
    212e:	8a 95       	dec	r24
    2130:	e2 f7       	brpl	.-8      	; 0x212a <MDIO_ErrorS_GetPinValue+0xa6>
    2132:	ca 01       	movw	r24, r20
    2134:	81 70       	andi	r24, 0x01	; 1
    2136:	ec 81       	ldd	r30, Y+4	; 0x04
    2138:	fd 81       	ldd	r31, Y+5	; 0x05
    213a:	80 83       	st	Z, r24
    213c:	2a c0       	rjmp	.+84     	; 0x2192 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTC : *P_u8Value = GET_BIT(PINC,Copy_u8Pin);break;
    213e:	e3 e3       	ldi	r30, 0x33	; 51
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a9 01       	movw	r20, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <MDIO_ErrorS_GetPinValue+0xd2>
    2152:	55 95       	asr	r21
    2154:	47 95       	ror	r20
    2156:	8a 95       	dec	r24
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <MDIO_ErrorS_GetPinValue+0xce>
    215a:	ca 01       	movw	r24, r20
    215c:	81 70       	andi	r24, 0x01	; 1
    215e:	ec 81       	ldd	r30, Y+4	; 0x04
    2160:	fd 81       	ldd	r31, Y+5	; 0x05
    2162:	80 83       	st	Z, r24
    2164:	16 c0       	rjmp	.+44     	; 0x2192 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTD : *P_u8Value = GET_BIT(PIND,Copy_u8Pin);break;
    2166:	e0 e3       	ldi	r30, 0x30	; 48
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a9 01       	movw	r20, r18
    2178:	02 c0       	rjmp	.+4      	; 0x217e <MDIO_ErrorS_GetPinValue+0xfa>
    217a:	55 95       	asr	r21
    217c:	47 95       	ror	r20
    217e:	8a 95       	dec	r24
    2180:	e2 f7       	brpl	.-8      	; 0x217a <MDIO_ErrorS_GetPinValue+0xf6>
    2182:	ca 01       	movw	r24, r20
    2184:	81 70       	andi	r24, 0x01	; 1
    2186:	ec 81       	ldd	r30, Y+4	; 0x04
    2188:	fd 81       	ldd	r31, Y+5	; 0x05
    218a:	80 83       	st	Z, r24
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <MDIO_ErrorS_GetPinValue+0x10e>
						default: errorState = return_Nok; break;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	89 83       	std	Y+1, r24	; 0x01
					}
	return errorState;
    2192:	89 81       	ldd	r24, Y+1	; 0x01

}
    2194:	27 96       	adiw	r28, 0x07	; 7
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <MDIO_ErrorS_SetPortValue>:

Error_State_t MDIO_ErrorS_SetPortValue( u8 Copy_u8Port , u8  Copy_U8Value ){
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <MDIO_ErrorS_SetPortValue+0x6>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <MDIO_ErrorS_SetPortValue+0x8>
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8a 83       	std	Y+2, r24	; 0x02
    21b6:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    21b8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	3d 83       	std	Y+5, r19	; 0x05
    21c2:	2c 83       	std	Y+4, r18	; 0x04
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	9d 81       	ldd	r25, Y+5	; 0x05
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	91 05       	cpc	r25, r1
    21cc:	d9 f0       	breq	.+54     	; 0x2204 <MDIO_ErrorS_SetPortValue+0x5e>
    21ce:	2c 81       	ldd	r18, Y+4	; 0x04
    21d0:	3d 81       	ldd	r19, Y+5	; 0x05
    21d2:	23 30       	cpi	r18, 0x03	; 3
    21d4:	31 05       	cpc	r19, r1
    21d6:	34 f4       	brge	.+12     	; 0x21e4 <MDIO_ErrorS_SetPortValue+0x3e>
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	9d 81       	ldd	r25, Y+5	; 0x05
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	91 05       	cpc	r25, r1
    21e0:	61 f0       	breq	.+24     	; 0x21fa <MDIO_ErrorS_SetPortValue+0x54>
    21e2:	1f c0       	rjmp	.+62     	; 0x2222 <MDIO_ErrorS_SetPortValue+0x7c>
    21e4:	2c 81       	ldd	r18, Y+4	; 0x04
    21e6:	3d 81       	ldd	r19, Y+5	; 0x05
    21e8:	23 30       	cpi	r18, 0x03	; 3
    21ea:	31 05       	cpc	r19, r1
    21ec:	81 f0       	breq	.+32     	; 0x220e <MDIO_ErrorS_SetPortValue+0x68>
    21ee:	8c 81       	ldd	r24, Y+4	; 0x04
    21f0:	9d 81       	ldd	r25, Y+5	; 0x05
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	91 05       	cpc	r25, r1
    21f6:	81 f0       	breq	.+32     	; 0x2218 <MDIO_ErrorS_SetPortValue+0x72>
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <MDIO_ErrorS_SetPortValue+0x7c>
		case DIO_PORTA : PORTA = Copy_U8Value ;break;
    21fa:	eb e3       	ldi	r30, 0x3B	; 59
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	80 83       	st	Z, r24
    2202:	11 c0       	rjmp	.+34     	; 0x2226 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTB : PORTB = Copy_U8Value ;break;
    2204:	e8 e3       	ldi	r30, 0x38	; 56
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	80 83       	st	Z, r24
    220c:	0c c0       	rjmp	.+24     	; 0x2226 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTC : PORTC = Copy_U8Value ;break;
    220e:	e5 e3       	ldi	r30, 0x35	; 53
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	80 83       	st	Z, r24
    2216:	07 c0       	rjmp	.+14     	; 0x2226 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTD : PORTD = Copy_U8Value ;break;
    2218:	e2 e3       	ldi	r30, 0x32	; 50
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	80 83       	st	Z, r24
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <MDIO_ErrorS_SetPortValue+0x80>
		default:errorState = return_Nok; break;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	89 83       	std	Y+1, r24	; 0x01
	}

		return errorState;
    2226:	89 81       	ldd	r24, Y+1	; 0x01


}
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <MDIO_ErrorS_GetPortValue>:
Error_State_t MDIO_ErrorS_GetPortValue( u8 Copy_u8Port , u8* P_u8Value ){
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	00 d0       	rcall	.+0      	; 0x223e <MDIO_ErrorS_GetPortValue+0x6>
    223e:	00 d0       	rcall	.+0      	; 0x2240 <MDIO_ErrorS_GetPortValue+0x8>
    2240:	00 d0       	rcall	.+0      	; 0x2242 <MDIO_ErrorS_GetPortValue+0xa>
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	8a 83       	std	Y+2, r24	; 0x02
    2248:	7c 83       	std	Y+4, r23	; 0x04
    224a:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    224c:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	3e 83       	std	Y+6, r19	; 0x06
    2256:	2d 83       	std	Y+5, r18	; 0x05
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	91 05       	cpc	r25, r1
    2260:	e9 f0       	breq	.+58     	; 0x229c <MDIO_ErrorS_GetPortValue+0x64>
    2262:	2d 81       	ldd	r18, Y+5	; 0x05
    2264:	3e 81       	ldd	r19, Y+6	; 0x06
    2266:	23 30       	cpi	r18, 0x03	; 3
    2268:	31 05       	cpc	r19, r1
    226a:	34 f4       	brge	.+12     	; 0x2278 <MDIO_ErrorS_GetPortValue+0x40>
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	91 05       	cpc	r25, r1
    2274:	61 f0       	breq	.+24     	; 0x228e <MDIO_ErrorS_GetPortValue+0x56>
    2276:	27 c0       	rjmp	.+78     	; 0x22c6 <MDIO_ErrorS_GetPortValue+0x8e>
    2278:	2d 81       	ldd	r18, Y+5	; 0x05
    227a:	3e 81       	ldd	r19, Y+6	; 0x06
    227c:	23 30       	cpi	r18, 0x03	; 3
    227e:	31 05       	cpc	r19, r1
    2280:	a1 f0       	breq	.+40     	; 0x22aa <MDIO_ErrorS_GetPortValue+0x72>
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	84 30       	cpi	r24, 0x04	; 4
    2288:	91 05       	cpc	r25, r1
    228a:	b1 f0       	breq	.+44     	; 0x22b8 <MDIO_ErrorS_GetPortValue+0x80>
    228c:	1c c0       	rjmp	.+56     	; 0x22c6 <MDIO_ErrorS_GetPortValue+0x8e>
		case DIO_PORTA : *P_u8Value = PINA ;break;
    228e:	e9 e3       	ldi	r30, 0x39	; 57
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	eb 81       	ldd	r30, Y+3	; 0x03
    2296:	fc 81       	ldd	r31, Y+4	; 0x04
    2298:	80 83       	st	Z, r24
    229a:	17 c0       	rjmp	.+46     	; 0x22ca <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTB : *P_u8Value = PINB ;break;
    229c:	e6 e3       	ldi	r30, 0x36	; 54
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	eb 81       	ldd	r30, Y+3	; 0x03
    22a4:	fc 81       	ldd	r31, Y+4	; 0x04
    22a6:	80 83       	st	Z, r24
    22a8:	10 c0       	rjmp	.+32     	; 0x22ca <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTC : *P_u8Value = PINC ;break;
    22aa:	e3 e3       	ldi	r30, 0x33	; 51
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	eb 81       	ldd	r30, Y+3	; 0x03
    22b2:	fc 81       	ldd	r31, Y+4	; 0x04
    22b4:	80 83       	st	Z, r24
    22b6:	09 c0       	rjmp	.+18     	; 0x22ca <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTD : *P_u8Value = PIND ;break;
    22b8:	e0 e3       	ldi	r30, 0x30	; 48
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	eb 81       	ldd	r30, Y+3	; 0x03
    22c0:	fc 81       	ldd	r31, Y+4	; 0x04
    22c2:	80 83       	st	Z, r24
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <MDIO_ErrorS_GetPortValue+0x92>
		default: errorState = return_Nok; break;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    22ca:	89 81       	ldd	r24, Y+1	; 0x01



}
    22cc:	26 96       	adiw	r28, 0x06	; 6
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <main>:
#include "MDIO_interface.h"
#include "HKeyPad_interface.h"
#include "HLCD_interface.h"
#include "HStpper_interface.h"

int main(void){
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	0f 92       	push	r0
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62

	//initializing ports
	Port_voidInit();
    22e8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Port_voidInit>

	HLCD_voidInit();
    22ec:	0e 94 6d 06 	call	0xcda	; 0xcda <HLCD_voidInit>
	HLCD_voidSendString("1:MCW,2:MCC,3:MS");
    22f0:	80 e6       	ldi	r24, 0x60	; 96
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	0e 94 37 08 	call	0x106e	; 0x106e <HLCD_voidSendString>
	HLCD_voidSetCursorPosition(2,1);
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	0e 94 9b 08 	call	0x1136	; 0x1136 <HLCD_voidSetCursorPosition>
	HLCD_voidSendString("4:SCW,5:SCC,6:SS");
    2300:	81 e7       	ldi	r24, 0x71	; 113
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 37 08 	call	0x106e	; 0x106e <HLCD_voidSendString>


	while(1){
		u8 pressedKey = HKeyPad_u8GetKey();
    2308:	0e 94 9b 05 	call	0xb36	; 0xb36 <HKeyPad_u8GetKey>
    230c:	89 83       	std	Y+1, r24	; 0x01
		if (pressedKey=='1' || pressedKey=='2' || pressedKey=='3' || pressedKey=='4' || pressedKey=='5' || pressedKey=='6')
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	81 33       	cpi	r24, 0x31	; 49
    2312:	79 f0       	breq	.+30     	; 0x2332 <main+0x54>
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	82 33       	cpi	r24, 0x32	; 50
    2318:	61 f0       	breq	.+24     	; 0x2332 <main+0x54>
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	83 33       	cpi	r24, 0x33	; 51
    231e:	49 f0       	breq	.+18     	; 0x2332 <main+0x54>
    2320:	89 81       	ldd	r24, Y+1	; 0x01
    2322:	84 33       	cpi	r24, 0x34	; 52
    2324:	31 f0       	breq	.+12     	; 0x2332 <main+0x54>
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	85 33       	cpi	r24, 0x35	; 53
    232a:	19 f0       	breq	.+6      	; 0x2332 <main+0x54>
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	86 33       	cpi	r24, 0x36	; 54
    2330:	59 f7       	brne	.-42     	; 0x2308 <main+0x2a>
		{
			// DC motor CW
			if (pressedKey == '1'){
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	81 33       	cpi	r24, 0x31	; 49
    2336:	59 f4       	brne	.+22     	; 0x234e <main+0x70>
				MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_HIGH);
    2338:	84 e0       	ldi	r24, 0x04	; 4
    233a:	63 e0       	ldi	r22, 0x03	; 3
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
				MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    2342:	84 e0       	ldi	r24, 0x04	; 4
    2344:	64 e0       	ldi	r22, 0x04	; 4
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    234c:	dd cf       	rjmp	.-70     	; 0x2308 <main+0x2a>
			}
			// DC motor ACW
			else if (pressedKey == '2'){
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	82 33       	cpi	r24, 0x32	; 50
    2352:	59 f4       	brne	.+22     	; 0x236a <main+0x8c>
				MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);
    2354:	84 e0       	ldi	r24, 0x04	; 4
    2356:	63 e0       	ldi	r22, 0x03	; 3
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
				MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_HIGH);
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	64 e0       	ldi	r22, 0x04	; 4
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    2368:	cf cf       	rjmp	.-98     	; 0x2308 <main+0x2a>
			}
			// DC motor stop
			else if (pressedKey == '3'){
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	83 33       	cpi	r24, 0x33	; 51
    236e:	59 f4       	brne	.+22     	; 0x2386 <main+0xa8>
				MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN3,DIO_LOW);
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	63 e0       	ldi	r22, 0x03	; 3
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
				MDIO_ErrorS_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_LOW);
    237a:	84 e0       	ldi	r24, 0x04	; 4
    237c:	64 e0       	ldi	r22, 0x04	; 4
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <MDIO_ErrorS_SetPinValue>
    2384:	c1 cf       	rjmp	.-126    	; 0x2308 <main+0x2a>
			}

			// Stepper motor CW
			else if (pressedKey == '4'){
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	84 33       	cpi	r24, 0x34	; 52
    238a:	39 f4       	brne	.+14     	; 0x239a <main+0xbc>
				Hstepper_rotate_CW(40);
    238c:	88 e2       	ldi	r24, 0x28	; 40
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 94 b8 08 	call	0x1170	; 0x1170 <Hstepper_rotate_CW>
				Hstepper_stop();
    2394:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <Hstepper_stop>
    2398:	b7 cf       	rjmp	.-146    	; 0x2308 <main+0x2a>

			}
			// Stepper motor ACW
			else if (pressedKey == '5'){
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	85 33       	cpi	r24, 0x35	; 53
    239e:	39 f4       	brne	.+14     	; 0x23ae <main+0xd0>
				Hstepper_rotate_ACW(40);
    23a0:	88 e2       	ldi	r24, 0x28	; 40
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 0d 0b 	call	0x161a	; 0x161a <Hstepper_rotate_ACW>
				Hstepper_stop();
    23a8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <Hstepper_stop>
    23ac:	ad cf       	rjmp	.-166    	; 0x2308 <main+0x2a>


			}
			// Stepper motor Stop
			else if (pressedKey == '6'){
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	86 33       	cpi	r24, 0x36	; 54
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <main+0xd8>
    23b4:	a9 cf       	rjmp	.-174    	; 0x2308 <main+0x2a>
				Hstepper_stop();
    23b6:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <Hstepper_stop>
    23ba:	a6 cf       	rjmp	.-180    	; 0x2308 <main+0x2a>

000023bc <__udivmodhi4>:
    23bc:	aa 1b       	sub	r26, r26
    23be:	bb 1b       	sub	r27, r27
    23c0:	51 e1       	ldi	r21, 0x11	; 17
    23c2:	07 c0       	rjmp	.+14     	; 0x23d2 <__udivmodhi4_ep>

000023c4 <__udivmodhi4_loop>:
    23c4:	aa 1f       	adc	r26, r26
    23c6:	bb 1f       	adc	r27, r27
    23c8:	a6 17       	cp	r26, r22
    23ca:	b7 07       	cpc	r27, r23
    23cc:	10 f0       	brcs	.+4      	; 0x23d2 <__udivmodhi4_ep>
    23ce:	a6 1b       	sub	r26, r22
    23d0:	b7 0b       	sbc	r27, r23

000023d2 <__udivmodhi4_ep>:
    23d2:	88 1f       	adc	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	5a 95       	dec	r21
    23d8:	a9 f7       	brne	.-22     	; 0x23c4 <__udivmodhi4_loop>
    23da:	80 95       	com	r24
    23dc:	90 95       	com	r25
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	08 95       	ret

000023e4 <__prologue_saves__>:
    23e4:	2f 92       	push	r2
    23e6:	3f 92       	push	r3
    23e8:	4f 92       	push	r4
    23ea:	5f 92       	push	r5
    23ec:	6f 92       	push	r6
    23ee:	7f 92       	push	r7
    23f0:	8f 92       	push	r8
    23f2:	9f 92       	push	r9
    23f4:	af 92       	push	r10
    23f6:	bf 92       	push	r11
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	ca 1b       	sub	r28, r26
    240e:	db 0b       	sbc	r29, r27
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	09 94       	ijmp

0000241c <__epilogue_restores__>:
    241c:	2a 88       	ldd	r2, Y+18	; 0x12
    241e:	39 88       	ldd	r3, Y+17	; 0x11
    2420:	48 88       	ldd	r4, Y+16	; 0x10
    2422:	5f 84       	ldd	r5, Y+15	; 0x0f
    2424:	6e 84       	ldd	r6, Y+14	; 0x0e
    2426:	7d 84       	ldd	r7, Y+13	; 0x0d
    2428:	8c 84       	ldd	r8, Y+12	; 0x0c
    242a:	9b 84       	ldd	r9, Y+11	; 0x0b
    242c:	aa 84       	ldd	r10, Y+10	; 0x0a
    242e:	b9 84       	ldd	r11, Y+9	; 0x09
    2430:	c8 84       	ldd	r12, Y+8	; 0x08
    2432:	df 80       	ldd	r13, Y+7	; 0x07
    2434:	ee 80       	ldd	r14, Y+6	; 0x06
    2436:	fd 80       	ldd	r15, Y+5	; 0x05
    2438:	0c 81       	ldd	r16, Y+4	; 0x04
    243a:	1b 81       	ldd	r17, Y+3	; 0x03
    243c:	aa 81       	ldd	r26, Y+2	; 0x02
    243e:	b9 81       	ldd	r27, Y+1	; 0x01
    2440:	ce 0f       	add	r28, r30
    2442:	d1 1d       	adc	r29, r1
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	ed 01       	movw	r28, r26
    2450:	08 95       	ret

00002452 <itoa>:
    2452:	fb 01       	movw	r30, r22
    2454:	9f 01       	movw	r18, r30
    2456:	e8 94       	clt
    2458:	42 30       	cpi	r20, 0x02	; 2
    245a:	c4 f0       	brlt	.+48     	; 0x248c <itoa+0x3a>
    245c:	45 32       	cpi	r20, 0x25	; 37
    245e:	b4 f4       	brge	.+44     	; 0x248c <itoa+0x3a>
    2460:	4a 30       	cpi	r20, 0x0A	; 10
    2462:	29 f4       	brne	.+10     	; 0x246e <itoa+0x1c>
    2464:	97 fb       	bst	r25, 7
    2466:	1e f4       	brtc	.+6      	; 0x246e <itoa+0x1c>
    2468:	90 95       	com	r25
    246a:	81 95       	neg	r24
    246c:	9f 4f       	sbci	r25, 0xFF	; 255
    246e:	64 2f       	mov	r22, r20
    2470:	77 27       	eor	r23, r23
    2472:	0e 94 de 11 	call	0x23bc	; 0x23bc <__udivmodhi4>
    2476:	80 5d       	subi	r24, 0xD0	; 208
    2478:	8a 33       	cpi	r24, 0x3A	; 58
    247a:	0c f0       	brlt	.+2      	; 0x247e <itoa+0x2c>
    247c:	89 5d       	subi	r24, 0xD9	; 217
    247e:	81 93       	st	Z+, r24
    2480:	cb 01       	movw	r24, r22
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	a1 f7       	brne	.-24     	; 0x246e <itoa+0x1c>
    2486:	16 f4       	brtc	.+4      	; 0x248c <itoa+0x3a>
    2488:	5d e2       	ldi	r21, 0x2D	; 45
    248a:	51 93       	st	Z+, r21
    248c:	10 82       	st	Z, r1
    248e:	c9 01       	movw	r24, r18
    2490:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <strrev>

00002494 <strrev>:
    2494:	dc 01       	movw	r26, r24
    2496:	fc 01       	movw	r30, r24
    2498:	67 2f       	mov	r22, r23
    249a:	71 91       	ld	r23, Z+
    249c:	77 23       	and	r23, r23
    249e:	e1 f7       	brne	.-8      	; 0x2498 <strrev+0x4>
    24a0:	32 97       	sbiw	r30, 0x02	; 2
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <strrev+0x18>
    24a4:	7c 91       	ld	r23, X
    24a6:	6d 93       	st	X+, r22
    24a8:	70 83       	st	Z, r23
    24aa:	62 91       	ld	r22, -Z
    24ac:	ae 17       	cp	r26, r30
    24ae:	bf 07       	cpc	r27, r31
    24b0:	c8 f3       	brcs	.-14     	; 0x24a4 <strrev+0x10>
    24b2:	08 95       	ret

000024b4 <_exit>:
    24b4:	f8 94       	cli

000024b6 <__stop_program>:
    24b6:	ff cf       	rjmp	.-2      	; 0x24b6 <__stop_program>
